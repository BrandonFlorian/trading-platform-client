This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    dashboard/
      page.tsx
    settings/
      page.tsx
    tracked-wallets/
      page.tsx
    trade/
      page.tsx
    trading/
      [address]/
        page.tsx
      page.tsx
    wallet-lookup/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    copy-trading/
      CopyTradingCard.tsx
    dashboard/
      connection-status.tsx
      copy-trade-settings-form.tsx
      dashboard.tsx
      notification-panel.tsx
      server-wallet-card.tsx
      token-row.tsx
      trade-panel.tsx
    error/
      RecoveryBoundary.tsx
    layout/
      sidebar.tsx
      watchlist-panel.tsx
    market/
      market-data-widget.tsx
      order-book.tsx
      token-list.tsx
    onboarding/
      HelpSystem.tsx
    settings/
      copy-trade-settings-panel.tsx
      copy-trade-settings.tsx
      exchange-settings.tsx
      general-settings.tsx
      settings-tabs.tsx
    tracked-wallets/
      tracked-wallets-panel.tsx
    trading/
      FloatingActions.tsx
      history.tsx
      TradeConfirmation.tsx
      TradeExecutionForm.tsx
      TradeList.tsx
    ui/
      avatar.tsx
      badge.tsx
      button.tsx
      card.tsx
      checkbox.tsx
      collapsible.tsx
      dialog.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      input.tsx
      label.tsx
      loading-dots.tsx
      loading-skeleton.tsx
      loading-state.tsx
      loading.tsx
      radio-group.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      tabs.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      transitions.tsx
    wallet/
      tracker.tsx
    wallet-lookup/
      wallet-lookup-form.tsx
      wallet-lookup-results.tsx
    watchlist/
      create-watchlist-dialog.tsx
      watchlist-button.tsx
      watchlist-manager.tsx
      watchlist-panel.tsx
    whatever/
      Component.tsx
    candlestick-chart.tsx
    theme-provider.tsx
    theme-toggle.tsx
    token-info-panel.tsx
  config/
    constants.ts
  hooks/
    use-mobile.tsx
    use-price-feed-websocket.ts
    use-toast.ts
    use-websocket.ts
    usePredictivePrefetch.ts
    useSmartRefresh.ts
  lib/
    utils.ts
  services/
    trade-service.ts
  stores/
    loading-store.ts
    market-data-store.ts
    price-store.ts
    setting-store.ts
    settings-store.ts
    trade-store.ts
    wallet-tracker-store.tsx
    watchlist-store.ts
    websocket-store.ts
  types/
    apexcharts.d.ts
    crypto.ts
    index.ts
    market.ts
    trading.ts
    ui.ts
    wallet.ts
    websocket.ts
.env.example
.gitignore
components.json
directory_structure
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/dashboard/page.tsx
================
import { MarketDataWidget } from '@/components/market/market-data-widget';
import { CardHeader, CardTitle } from '@/components/ui/card';
import { Card, CardContent } from '@/components/ui/card';
import { LoadingCard, LoadingOverlay, LoadingSpinner } from '@/components/ui/loading'

const DashboardPage = () => {
    const { isLoading: loadingWatchlists } = useWatchlistStore();
    const { isLoading: loadingMarketData } = useMarketDataStore();

    return (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 p-4">
            {/* Watchlist Panel */}
            <Card className="lg:col-span-1">
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        Watchlists
                        {loadingWatchlists && <LoadingSpinner size="sm" />}
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    {loadingWatchlists ? (
                        <LoadingCard rows={4} />
                    ) : (
            // ... existing watchlist content ...
          )}
                </CardContent>
            </Card>

            {/* Main Content */}
            <div className="lg:col-span-2 flex flex-col gap-4">
                <LoadingOverlay loading={loadingMarketData}>
                    <MarketDataWidget key="market-data" />
                </LoadingOverlay>

                <Card className="flex-1">
                    <CardHeader>
                        <CardTitle>Portfolio Summary</CardTitle>
                    </CardHeader>
                    <CardContent>
                        {loadingMarketData ? (
                            <LoadingCard rows={6} />
                        ) : (
              // ... existing portfolio content ...
            )}
                    </CardContent>
                </Card>
            </div>
        </div>
    );
};

================
File: src/app/settings/page.tsx
================
// src/app/settings/page.tsx
"use client"

import { SettingsTabs } from '@/components/settings/settings-tabs'
import { NotificationSkeletons } from "@/components/ui/loading-skeleton"

export default function SettingsPage() {
  const isLoading = false; // Replace with actual loading state

  return (
    <div className="container mx-auto py-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold">Settings</h1>
        <p className="text-muted-foreground">
          Manage your application settings and preferences
        </p>
      </div>
      
      {isLoading ? (
        <NotificationSkeletons />
      ) : (
        <SettingsTabs />
      )}
    </div>
  )
}

================
File: src/app/tracked-wallets/page.tsx
================
// src/app/tracked-wallets/page.tsx
"use client"

import React from 'react'
import { TrackedWalletsPanel } from '@/components/tracked-wallets/tracked-wallets-panel'
import ServerWalletCard from '@/components/dashboard/server-wallet-card'
import { NotificationsPanel } from '@/components/dashboard/notification-panel'

export default function TrackedWalletsPage() {
  return (
    <div className="flex flex-col min-h-screen p-4">
      {/* Centered Header */}
      <div className="text-center mb-8 animate-in fade-in slide-in-from-top duration-500">
        <h1 className="text-3xl font-bold">Tracked Wallets</h1>
        <p className="text-muted-foreground mt-2">Monitor and analyze wallet activity</p>
      </div>

      {/* Three Equal Panels */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 h-[calc(100vh-160px)]">
        <div className="animate-in fade-in slide-in-from-left duration-700">
          <TrackedWalletsPanel />
        </div>
        <div className="animate-in fade-in zoom-in duration-700 delay-150">
          <ServerWalletCard displayName="Connected Wallet" />
        </div>
        <div className="animate-in fade-in slide-in-from-right duration-700">
          <NotificationsPanel />
        </div>
      </div>
    </div>
  )
}

================
File: src/app/trade/page.tsx
================
import { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card } from '@/components/ui/card';
import { LoadingSpinner } from '@/components/ui/loading';
import { ChartSkeletons, OrderBookSkeletons, TokenSkeletons } from "@/components/ui/loading-skeleton";

import { useWatchlistStore } from '@/stores/watchlist-store';
import { useTradeStore } from '@/stores/trade-store';
import type { WatchlistToken } from '@/stores/watchlist-store';

import CandlestickChart from '@/components/candlestick-chart';
import { TradePanel } from '@/components/dashboard/trade-panel';
import ReactDraggable from 'react-draggable';

const TradePage = () => {
    const [tokenAddress, setTokenAddress] = useState<string>('');
    const { tokens, activeWatchlistId, isLoading: loadingWatchlist } = useWatchlistStore();
    const { isExecutingTrade, setIsExecutingTrade } = useTradeStore();

    return (
        <div className="h-screen w-full relative p-4 bg-background">
            {/* Centered Header */}
            <div className="text-center mb-6">
                <h1 className="text-2xl font-bold">Tracked Wallet</h1>
                <p className="text-muted-foreground">Monitor and analyze wallet activity</p>
            </div>

            {/* Three Equal Panels */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-120px)]">
                {/* Left Panel - Chart */}
                <Card className="flex flex-col">
                    <div className="flex-1 transition-opacity duration-300 ease-in-out">
                        {isExecutingTrade ? (
                            <div className="animate-in fade-in zoom-in duration-300">
                                <ChartSkeletons />
                            </div>
                        ) : (
                            <div className="animate-in fade-in zoom-in duration-300">
                                <CandlestickChart tokenAddress={tokenAddress} />
                            </div>
                        )}
                    </div>
                </Card>

                {/* Middle Panel - Trading Interface */}
                <Card className="flex flex-col">
                    <Tabs defaultValue="trade" className="h-full">
                        <TabsList className="grid w-full grid-cols-2">
                            <TabsTrigger value="trade">
                                {isExecutingTrade ? (
                                    <LoadingSpinner size="sm" className="mr-2" />
                                ) : (
                                    'Trade'
                                )}
                            </TabsTrigger>
                            <TabsTrigger value="orders">Orders</TabsTrigger>
                        </TabsList>
                        <TabsContent value="trade" className="flex-1">
                            {tokenAddress && (
                                <TradePanel
                                    token={{
                                        address: tokenAddress,
                                        symbol: tokens.find(t => t.address === tokenAddress)?.symbol || '',
                                        name: tokens.find(t => t.address === tokenAddress)?.name || '',
                                        balance: '0',
                                        decimals: 9,
                                        market_cap: tokens.find(t => t.address === tokenAddress)?.market_cap || 0
                                    }}
                                    onTrade={async () => { /* Add actual trade logic */ }}
                                />
                            )}
                        </TabsContent>
                        <TabsContent value="orders" className="flex-1">
                            {/* Orders content */}
                        </TabsContent>
                    </Tabs>
                </Card>

                {/* Right Panel - Market Data */}
                <Card className="flex flex-col">
                    {loadingWatchlist ? (
                        <div className="animate-in fade-in slide-in-from-bottom duration-500">
                            <OrderBookSkeletons />
                        </div>
                    ) : (
                        <div className="animate-in fade-in slide-in-from-bottom duration-500">
                            <div className="p-4 space-y-4">
                                <div>
                                    <h3 className="font-semibold mb-2">Market Depth</h3>
                                    {/* Market depth content */}
                                </div>
                                <div>
                                    <h3 className="font-semibold mb-2">Recent Trades</h3>
                                    {/* Recent trades content */}
                                </div>
                            </div>
                        </div>
                    )}
                </Card>
            </div>

            {/* Floating Watchlist */}
            {activeWatchlistId && (
                <ReactDraggable bounds="parent" handle=".handle">
                    <Card className="w-64 absolute right-4 top-4 z-50 transition-all duration-300 ease-in-out hover:shadow-lg">
                        <div className="handle cursor-move p-4 border-b">
                            <h3 className="font-semibold">Watchlist</h3>
                        </div>
                        <div className="p-4 max-h-[600px] overflow-y-auto">
                            {loadingWatchlist ? (
                                <div className="animate-in fade-in slide-in-from-right duration-500">
                                    <TokenSkeletons />
                                </div>
                            ) : (
                                <div className="animate-in fade-in slide-in-from-left duration-500">
                                    {tokens.map((token: WatchlistToken) => (
                                        <div
                                            key={token.address}
                                            className="p-2 hover:bg-accent rounded cursor-pointer transition-colors duration-200"
                                            onClick={() => setTokenAddress(token.address)}
                                        >
                                            <div className="flex justify-between items-center">
                                                <span className="font-medium">{token.symbol}</span>
                                                <span className="text-sm text-muted-foreground">
                                                    {token.price_sol?.toFixed(4)} SOL
                                                </span>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </Card>
                </ReactDraggable>
            )}
        </div>
    );
};

export default TradePage;

================
File: src/app/trading/[address]/page.tsx
================
"use client"

import { useParams } from "next/navigation"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card } from "@/components/ui/card"
import CandlestickChart from "@/components/candlestick-chart"
import { TradePanel } from "@/components/dashboard/trade-panel"
import { useWatchlistStore } from "@/stores/watchlist-store"
import WatchlistManager from "@/components/watchlist/watchlist-manager"
import { ChartSkeletons, TokenSkeletons } from "@/components/ui/loading-skeleton"
import { TokenInfoPanel } from "@/components/token-info-panel"

const TradingPage = () => {
  const { address } = useParams<{ address: string }>()
  const { tokens, fetchWatchlistTokens, activeWatchlistId } = useWatchlistStore()
  const currentToken = tokens.find((t) => t.address === address)
  const isLoading = false // Replace with actual loading state

  return (
    <div className="h-screen w-full relative p-4 bg-background">
      {isLoading ? (
        <div className="space-y-6">
          <ChartSkeletons />
          <TokenSkeletons />
        </div>
      ) : (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-full">
          {/* Chart and Trade Panel */}
          <div className="lg:col-span-2 flex flex-col gap-4 h-full">
            <CandlestickChart tokenAddress={address} />
            <Card className="flex-1">
              <Tabs defaultValue="trade" className="h-full">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="trade">Trade</TabsTrigger>
                  <TabsTrigger value="orders">Orders</TabsTrigger>
                </TabsList>
                <TabsContent value="trade" className="h-full">
                  {address && currentToken && (
                    <TradePanel
                      token={{
                        address,
                        symbol: currentToken.symbol,
                        name: currentToken.name,
                        balance: currentToken.balance || "0",
                        decimals: 9,
                        market_cap: currentToken.market_cap || 0,
                      }}
                      onTrade={async (type, amount, dex) => {
                        return Promise.resolve()
                      }}
                    />
                  )}
                </TabsContent>
                <TabsContent value="orders">{/* Order history */}</TabsContent>
              </Tabs>
            </Card>
          </div>

          {/* Market Data Column */}
          <div className="lg:col-span-1 flex flex-col gap-4">
            <TokenInfoPanel tokenAddress={address} />
            <Card className="p-4">
              <h3 className="font-semibold mb-2">Market Depth</h3>
            </Card>
            <Card className="p-4 flex-1">
              <h3 className="font-semibold mb-2">Recent Trades</h3>
            </Card>
            <Card className="p-4">
              <WatchlistManager />
            </Card>
          </div>
        </div>
      )}
    </div>
  )
}

export default TradingPage

================
File: src/app/trading/page.tsx
================
"use client"

import { useEffect } from "react"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { TokenSkeletons, ChartSkeletons, OrderBookSkeletons } from "@/components/ui/loading-skeleton"
import { useWatchlistStore } from "@/stores/watchlist-store"
import { useWalletTrackerStore } from "@/stores/wallet-tracker-store"
import { MarketDataWidget } from "@/components/market/market-data-widget"
import { cn } from "@/lib/utils"

export default function DashboardPage() {
  const {
    fetchWatchlists,
    isLoading: watchlistLoading
  } = useWatchlistStore()

  const {
    serverWallet,
    isLoading: walletLoading
  } = useWalletTrackerStore()

  useEffect(() => {
    fetchWatchlists()
  }, [fetchWatchlists])

  return (
    <div className="min-h-screen p-4 lg:p-8">
      <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
        <div className="lg:col-span-8 space-y-6">
          {walletLoading ? (
            <TokenSkeletons />
          ) : (
            <Card>
              <CardHeader>
                <CardTitle className="flex justify-between items-center">
                  <span>Server Wallet</span>
                  <span>{serverWallet?.balance?.toFixed(4) || 0} SOL</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {serverWallet?.tokens.map((token) => (
                  <div
                    key={token.mint}
                    className={cn(
                      "flex justify-between items-center p-4",
                      "hover:bg-accent rounded-lg transition-colors"
                    )}
                  >
                    <div>
                      <div className="font-medium">{token.symbol}</div>
                      <div className="text-sm text-muted-foreground">
                        {token.raw_balance}
                      </div>
                    </div>
                    <div className="text-right">
                      <div>{token.price_sol?.toFixed(6)} SOL</div>
                      <div className="text-sm text-muted-foreground">
                        ${token.price_usd?.toFixed(2)}
                      </div>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          )}

          {watchlistLoading ? (
            <ChartSkeletons />
          ) : (
            <MarketDataWidget />
          )}
        </div>

        <div className="lg:col-span-4 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Recent Activity</CardTitle>
            </CardHeader>
            <CardContent>
              {/* Activity content */}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Settings</CardTitle>
            </CardHeader>
            <CardContent>
              {/* Settings content */}
            </CardContent>
          </Card>

          <OrderBookSkeletons />
        </div>
      </div>
    </div>
  )
}

================
File: src/app/wallet-lookup/page.tsx
================
// src/app/wallet-lookup/page.tsx
"use client"

import React, { useState } from 'react'
import { WalletLookupForm } from '@/components/wallet-lookup/wallet-lookup-form'
import { WalletLookupResults } from '@/components/wallet-lookup/wallet-lookup-results'
import { WalletLookupResult } from '@/types'

export default function WalletLookupPage() {
  const [lookupResult, setLookupResult] = useState<WalletLookupResult | null>(null)

  const handleLookupResult = (result: WalletLookupResult) => {
    setLookupResult(result)
  }

  return (
    <div className="min-h-screen p-4 lg:p-8">
      <h1 className="text-2xl font-bold mb-6">Wallet Lookup</h1>
      <div className="space-y-6">
        <WalletLookupForm onLookupResult={handleLookupResult} />
        {lookupResult && <WalletLookupResults walletDetails={lookupResult} />}
      </div>
    </div>
  )
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import React from 'react'
import { Sidebar } from '@/components/layout/sidebar'
import { Toaster } from '@/components/ui/sonner'
import { ThemeProvider } from '@/components/theme-provider'
import './globals.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <div className="flex min-h-screen">
            <Sidebar />
            <div className="flex-1">
              <main className="container mx-auto p-4 lg:p-8">
                {children}
              </main>
            </div>
          </div>
          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  )
}

================
File: src/app/page.tsx
================
// src/app/page.tsx

export default function HomePage() {
  return (
    <div className="min-h-screen p-4 lg:p-8">
      <h1 className="text-3xl font-bold mb-6">WELCOME TO THE ALL IN ONE TRADING PLATFORM</h1>
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-12">
        <div className="lg:col-span-8 space-y-6">

        </div>
      </div>
    </div>
  )
}

================
File: src/components/copy-trading/CopyTradingCard.tsx
================
import { Card } from "@tremor/react";
import { CardContent, CardDescription, CardHeader, CardTitle } from "../ui/card";
import { Tooltip, TooltipContent, TooltipTrigger } from "@radix-ui/react-tooltip";
import { Info } from "lucide-react";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { Separator } from "@/components/ui/separator";

export const CopyTradingCard = () => (
    <Card>
        <CardHeader>
            <CardTitle>One-Click Copy Trading</CardTitle>
            <CardDescription className="text-muted-foreground">
                Follow expert traders with a single click
                <Tooltip>
                    <TooltipTrigger>
                        <Info size={16} className="ml-2" />
                    </TooltipTrigger>
                    <TooltipContent>We automatically mirror trades in real-time</TooltipContent>
                </Tooltip>
            </CardDescription>
        </CardHeader>
        <CardContent>
            <ToggleGroup type="single" variant="outline">
                <ToggleGroupItem value="enabled">Enabled</ToggleGroupItem>
                <ToggleGroupItem value="disabled">Disabled</ToggleGroupItem>
            </ToggleGroup>
            <Collapsible>
                <CollapsibleTrigger>Advanced settings</CollapsibleTrigger>
                <CollapsibleContent>
                    <Separator className="my-4" />
                </CollapsibleContent>
            </Collapsible>
        </CardContent>
    </Card>
)

================
File: src/components/dashboard/connection-status.tsx
================
"use client";

import { cn } from "@/lib/utils";
import { ConnectionState } from "@/types/ui";

export const ConnectionStatus = ({ status }: { status: ConnectionState }) => {
  return (
    <div className="flex items-center gap-2 p-2 rounded-lg bg-background border">
      <div
        className={cn(
          "w-2 h-2 rounded-full",
          status === "connected" && "bg-green-500",
          status === "connecting" && "bg-yellow-500",
          status === "disconnected" && "bg-red-500"
        )}
      />
      <span className="capitalize">{status}</span>
    </div>
  );
};

================
File: src/components/dashboard/copy-trade-settings-form.tsx
================
"use client";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useWalletTrackerStore } from "@/stores/wallet-tracker-store";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";

const settingsSchema = z.object({
  is_enabled: z.boolean(),
  trade_amount_sol: z
    .number()
    .min(0.001, "Minimum trade amount is 0.001 SOL")
    .max(10, "Maximum trade amount is 10 SOL"),
  max_slippage: z
    .number()
    .min(0.01, "Minimum slippage is 0.01%")
    .max(50, "Maximum slippage is 50%"),
  max_open_positions: z
    .number()
    .min(1, "Minimum positions is 1")
    .max(100, "Maximum positions is 100"),
  allow_additional_buys: z.boolean(),
  min_sol_balance: z.number().min(0.001, "Minimum balance is 0.001 SOL"),
});

export const CopyTradeSettingsForm = () => {
  const { copyTradeSettings, setCopyTradeSettings } = useWalletTrackerStore();

  const form = useForm<z.infer<typeof settingsSchema>>({
    resolver: zodResolver(settingsSchema),
    defaultValues: copyTradeSettings || {
      is_enabled: false,
      trade_amount_sol: 0.001,
      max_slippage: 1.0,
      max_open_positions: 1,
      allow_additional_buys: false,
      min_sol_balance: 0.001,
    },
  });

  const onSubmit = async (data: z.infer<typeof settingsSchema>) => {
    try {
      const response = await fetch("/api/copy_trade_settings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (!response.ok) throw new Error("Failed to save settings");

      const savedSettings = await response.json();
      setCopyTradeSettings(savedSettings);
      toast.success("Settings saved successfully");
    } catch (error) {
      toast.error("Failed to save settings", {
        description: error instanceof Error ? error.message : "Unknown error",
      });
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="is_enabled"
          render={({ field }) => (
            <FormItem className="flex items-center justify-between">
              <FormLabel>Enable Copy Trading</FormLabel>
              <FormControl>
                <Switch
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="trade_amount_sol"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Trade Amount (SOL)</FormLabel>
              <FormControl>
                <Input
                  type="number"
                  step="0.001"
                  {...field}
                  onChange={(e) => field.onChange(parseFloat(e.target.value))}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit" className="w-full">
          Save Settings
        </Button>
      </form>
    </Form>
  );
};

================
File: src/components/dashboard/dashboard.tsx
================
"use client";
import { useWalletTrackerStore } from "@/stores/wallet-tracker-store";
import { ConnectionStatus } from "@/components/dashboard/connection-status";
import { ServerWalletCard } from "@/components/dashboard/server-wallet-card";
import { CopyTradeSettingsPanel } from "@/components/settings/copy-trade-settings-panel";
import { NotificationsPanel } from "@/components/dashboard/notification-panel";
import { Loader2 } from "lucide-react";
import useWebsocket from "@/hooks/use-websocket";
import { useEffect } from "react";

const WS_URL = process.env.NEXT_PUBLIC_WS_URL || "ws://localhost:3001";

export const Dashboard = () => {
  const {
    isLoading,
    connectionStatus,
    fetchWalletInfo,
    fetchCopyTradeSettings,
    serverWallet,
    copyTradeSettings,
  } = useWalletTrackerStore();
  const { isConnected } = useWebsocket(WS_URL);

  // Fetch initial data
  useEffect(() => {
    Promise.all([fetchWalletInfo(), fetchCopyTradeSettings()]);
  }, [fetchWalletInfo, fetchCopyTradeSettings]);

  return (
    <div className="min-h-screen bg-background p-4 lg:p-8">
      {/* Header with connection status */}
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">Trading Dashboard</h1>
        <div className="flex items-center gap-4">
          {isLoading && <Loader2 className="h-4 w-4 animate-spin" />}
          <ConnectionStatus status={connectionStatus} />
        </div>
      </div>

      {/* Main grid layout */}
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-12">
        {/* Left column - Wallet and Trading */}
        <div className="lg:col-span-8 space-y-6">
          {serverWallet && <ServerWalletCard />}
        </div>

        {/* Right column - Settings and Notifications */}
        <div className="lg:col-span-4 space-y-6">
          {copyTradeSettings && <CopyTradeSettingsPanel />}
          <NotificationsPanel />
        </div>
      </div>

      {/* Websocket Connection Status */}
      {!isConnected && (
        <div className="fixed bottom-4 right-4 bg-destructive text-destructive-foreground px-4 py-2 rounded-lg shadow-lg">
          Disconnected from server - Reconnecting...
        </div>
      )}
    </div>
  );
};

================
File: src/components/dashboard/notification-panel.tsx
================
"use client";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardContent, CardHeader, CardTitle } from "../ui/card";
import { Badge } from "@/components/ui/badge";
import { formatDistanceToNow } from "date-fns";
import { useWalletTrackerStore } from "@/stores/wallet-tracker-store";
import { Bell, CheckCircle2, XCircle, AlertCircle, Info } from "lucide-react";
import { Button } from "../ui/button";
import { cn } from "@/lib/utils";

const getNotificationIcon = (type: string) => {
  switch (type) {
    case "success":
      return <CheckCircle2 className="h-4 w-4 text-green-500" />;
    case "error":
      return <XCircle className="h-4 w-4 text-red-500" />;
    case "warning":
      return <AlertCircle className="h-4 w-4 text-yellow-500" />;
    default:
      return <Info className="h-4 w-4 text-blue-500" />;
  }
};

const getNotificationBadge = (type: string) => {
  switch (type) {
    case "buy":
      return <Badge variant="default">Buy</Badge>;
    case "sell":
      return <Badge variant="destructive">Sell</Badge>;
    case "copy_trade":
      return <Badge variant="secondary">Copy Trade</Badge>;
    default:
      return <Badge>Info</Badge>;
  }
};

export function NotificationsPanel() {
  const { notifications, clearNotifications } = useWalletTrackerStore();

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="text-center flex justify-center items-center gap-2">
          <Bell className="h-5 w-5" />
          <span>Notifications</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[400px] pr-4">
          {notifications.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-32 text-muted-foreground">
              <Bell className="h-8 w-8 mb-2" />
              <p>No notifications yet</p>
            </div>
          ) : (
            <div className="space-y-4">
              {notifications.map((notification) => (
                <div
                  key={notification.id}
                  className={cn(
                    "flex items-start gap-4 p-4 rounded-lg",
                    "bg-card/50 border transition-colors",
                    "hover:bg-accent/50"
                  )}
                >
                  {getNotificationIcon(notification.type)}
                  <div className="flex-1 space-y-1">
                    <div className="flex items-center justify-between">
                      <p className="font-medium">{notification.title}</p>
                      {getNotificationBadge(notification.type)}
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {notification.message}
                    </p>
                    <p className="text-xs text-muted-foreground">
                      {formatDistanceToNow(notification.timestamp, {
                        addSuffix: true,
                      })}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          )}
        </ScrollArea>
      </CardContent>
    </Card>
  );
}

================
File: src/components/dashboard/server-wallet-card.tsx
================
"use client"
import React, { useEffect, useState } from "react";
import { useWalletTrackerStore } from "@/stores/wallet-tracker-store";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { TokenInfo } from "@/types";
import { Skeleton } from "@/components/ui/skeleton";
import { TokenRow } from "./token-row";
import { TradePanel } from "./trade-panel";
import { Plus } from "lucide-react";
import { toast } from "sonner";
import { DexType } from "@/types/crypto";
import { TradeType } from "@/types/ui";

interface Props {
  displayName?: string;
}

export default function ServerWalletCard({ displayName = "Server Wallet" }: Props) {
  const {
    serverWallet,
    isLoading,
    error,
    executeBuy,
    executeSell,
    copyTradeSettings,
    fetchWalletInfo,
  } = useWalletTrackerStore();

  const [selectedToken, setSelectedToken] = useState<TokenInfo | null>(null);
  const [showNewTokenDialog, setShowNewTokenDialog] = useState(false);
  const [newTokenAddress, setNewTokenAddress] = useState("");
  const [isTradeDialogOpen, setIsTradeDialogOpen] = useState(false);

  useEffect(() => {
    fetchWalletInfo();
  }, [fetchWalletInfo]);

  const handleTokenTrade = (token: TokenInfo) => {
    setSelectedToken(token);
    setIsTradeDialogOpen(true);
  };

  const handleNewToken = () => {
    if (!newTokenAddress.trim()) {
      toast.error("Please enter a token address");
      return;
    }

    const tokenInfo: TokenInfo = {
      mint: newTokenAddress,
      symbol: "NEW",
      name: "New Token",
      raw_balance: "0",
      decimals: 9,
      market_cap: 0
    };

    setSelectedToken(tokenInfo);
    setShowNewTokenDialog(false);
  };

  const handleTrade = async (type: TradeType, amount: number, dex: DexType) => {
    try {
      if (type === "buy") {
        const tokenAddress = selectedToken ? selectedToken.mint : newTokenAddress;
        if (!tokenAddress) {
          toast.error("No token address provided");
          return;
        }

        await executeBuy(
          tokenAddress,
          amount,
          copyTradeSettings?.max_slippage || 0.2,
          dex
        );
      } else {
        if (!selectedToken?.mint) {
          toast.error("No token selected for sell");
          return;
        }

        await executeSell(
          selectedToken.mint,
          amount,
          copyTradeSettings?.max_slippage || 0.2,
          dex
        );
      }

      setIsTradeDialogOpen(false);
      setNewTokenAddress("");
      setShowNewTokenDialog(false);
    } catch (error) {
      console.error("Trade failed:", error);
    }
  };

  if (error) {
    return (
      <Card className="border-red-200">
        <CardHeader>
          <CardTitle className="text-red-500">Error Loading Wallet</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-red-400">{error}</p>
          <Button
            variant="outline"
            className="mt-4"
            onClick={() => window.location.reload()}
          >
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex justify-between">
            <Skeleton className="h-6 w-32" />
            <Skeleton className="h-6 w-24" />
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {[1, 2, 3].map((i) => (
            <div key={`skeleton-${i}`} className="flex justify-between items-center">
              <div className="flex items-center gap-4">
                <Skeleton className="h-12 w-12 rounded-full" />
                <div className="space-y-2">
                  <Skeleton className="h-4 w-20" />
                  <Skeleton className="h-4 w-32" />
                </div>
              </div>
              <div className="text-right">
                <Skeleton className="h-4 w-24" />
                <Skeleton className="h-4 w-16 mt-1" />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>
    );
  }

  if (!serverWallet) return null;

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="text-center">{displayName}</CardTitle>
      </CardHeader>
      <CardContent>
        {serverWallet.tokens?.map((token, index) => (
          <TokenRow
            key={`${token.mint}-${index}`}
            token={{
              address: token.mint,  // Match tracked-wallets format
              symbol: token.symbol,
              name: token.name,
              balance: token.raw_balance,
              market_cap: token.market_cap,
              decimals: token.decimals
            }}
            onClickTrade={() => handleTokenTrade({
              mint: token.mint,  // Match tracked-wallets format
              symbol: token.symbol,
              name: token.name,
              raw_balance: token.raw_balance,
              market_cap: token.market_cap,
              decimals: token.decimals
            })}
          />
        ))}
      </CardContent>
    </Card>
  );
}

================
File: src/components/dashboard/token-row.tsx
================
import { TokenRowProps } from "@/types/ui"
import { Button } from "@/components/ui/button"
import { formatBalance } from "@/lib/utils"
import { Star } from "lucide-react"
import { useWatchlistStore, WatchlistToken } from "@/stores/watchlist-store"
import { toast } from "sonner"
import { useWalletTrackerStore } from "@/stores/wallet-tracker-store"
import { useRouter } from "next/navigation"

export const TokenRow = ({ token, onClickTrade }: TokenRowProps) => {
  const router = useRouter()
  const { addToken, activeWatchlistId, tokens } = useWatchlistStore()
  const { copyTradeSettings } = useWalletTrackerStore()

  const formattedBalance = formatBalance(parseFloat(token.balance))
  const hasMarketCap = token.market_cap > 0
  const isInWatchlist = tokens.some(t => t.address === token.address)

  const handleTokenClick = () => {
    router.push(`/trading/${token.address}`)
  }

  const handleAddToWatchlist = async () => {
    if (!activeWatchlistId) {
      toast.error('Please select a watchlist first')
      return
    }

    try {
      const tokenToAdd: WatchlistToken = {
        address: token.address,
        symbol: token.symbol,
        name: token.name,
        balance: token.balance,
        market_cap: token.market_cap
      }

      await addToken(tokenToAdd)
      toast.success(`${token.symbol} added to watchlist`)
    } catch (error: any) {
      console.error('Error adding token to watchlist:', {
        error: error.message || 'Failed to add token',
        token,
        watchlistId: activeWatchlistId
      })
      toast.error(error.message || 'Failed to add token to watchlist')
    }
  }

  return (
    <div
      className="flex items-center justify-between py-2 hover:bg-accent/50 rounded-lg px-2 transition-colors cursor-pointer"
      onClick={handleTokenClick}
    >
      <div className="flex items-center gap-3">
        <div className="flex flex-col">
          <span className="font-medium">{token.symbol}</span>
          <span className="text-sm text-muted-foreground truncate max-w-[200px]">
            {token.name}
          </span>
        </div>
      </div>
      <div className="flex items-center gap-4" onClick={e => e.stopPropagation()}>
        <div className="text-right">
          <div className="font-medium">{formattedBalance}</div>
          {hasMarketCap && (
            <div className="text-sm text-muted-foreground">
              ${formatBalance(parseFloat(token.balance) * token.market_cap)}
            </div>
          )}
        </div>
        <Button
          variant="outline"
          size="sm"
          onClick={() => onClickTrade()}
          className="min-w-[80px]"
        >
          Trade
        </Button>
        <Button
          variant="ghost"
          size="icon"
          onClick={handleAddToWatchlist}
          className={isInWatchlist ? "text-primary" : ""}
        >
          <Star
            className="h-4 w-4"
            fill={isInWatchlist ? "currentColor" : "none"}
          />
        </Button>
      </div>
    </div>
  )
}

================
File: src/components/dashboard/trade-panel.tsx
================
import { useState } from "react";
import { TokenTradeProps } from "@/types/ui";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { DexType } from "@/types/crypto";
import { useWalletTrackerStore } from "@/stores/wallet-tracker-store";

const QUICK_BUY_AMOUNTS = [0.01, 0.05, 0.1, 0.5];
const QUICK_SELL_PERCENTAGES = [25, 50, 75, 100];
const MIN_SOL_AMOUNT = 0.000001;
const MAX_SOL_AMOUNT = 100;

export const TradePanel = ({ token, onTrade }: TokenTradeProps) => {
  const { copyTradeSettings, isLoading } = useWalletTrackerStore();

  const [customBuyAmount, setCustomBuyAmount] = useState("");
  const [customSellAmount, setCustomSellAmount] = useState("");
  const [selectedDex, setSelectedDex] = useState<DexType>("jupiter");
  const tokenBalance = parseFloat(token.balance);

  const handleQuickBuy = async (amount: number) => {
    try {
      await onTrade("buy", amount, selectedDex);
      toast.success(`Buy order placed for ${amount} SOL of ${token.symbol}`);
    } catch (error) {
      console.error("Buy failed:", error);
    }
  };

  const handleCustomBuy = async () => {
    const amount = parseFloat(customBuyAmount);
    if (isNaN(amount) || amount < MIN_SOL_AMOUNT || amount > MAX_SOL_AMOUNT) {
      toast.error(`Please enter an amount between ${MIN_SOL_AMOUNT} and ${MAX_SOL_AMOUNT} SOL`);
      return;
    }
    await handleQuickBuy(amount);
  };

  const handleQuickSell = async (percentage: number) => {
    const amount = (tokenBalance * percentage) / 100;
    try {
      await onTrade("sell", amount, selectedDex);
      toast.success(`Sell order placed for ${percentage}% of ${token.symbol}`);
    } catch (error) {
      console.error("Sell failed:", error);
    }
  };

  const handleCustomSell = async () => {
    const amount = parseFloat(customSellAmount);
    if (isNaN(amount) || amount <= 0 || amount > tokenBalance) {
      toast.error(`Please enter an amount between 0 and ${tokenBalance} ${token.symbol}`);
      return;
    }
    try {
      await onTrade("sell", amount, selectedDex);
      toast.success(`Sell order placed for ${amount} ${token.symbol}`);
    } catch (error) {
      console.error("Sell failed:", error);
    }
  };

  return (
    <>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Trade {token.symbol}</span>
          {isLoading && <Loader2 className="h-4 w-4 animate-spin" />}
        </CardTitle>
      </CardHeader>
      <CardContent className="pt-0">
        <div className="mb-4">
          <label className="text-sm font-medium mb-1 block">Select DEX</label>
          <Select value={selectedDex} onValueChange={(value) => setSelectedDex(value as DexType)}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="jupiter">Jupiter</SelectItem>
              <SelectItem value="raydium">Raydium</SelectItem>
              <SelectItem value="pump_fun">Pump.fun</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <Tabs defaultValue="buy" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="buy">Buy</TabsTrigger>
            <TabsTrigger value="sell">Sell</TabsTrigger>
          </TabsList>

          <TabsContent value="buy" className="space-y-4">
            <div className="grid grid-cols-2 gap-2">
              {QUICK_BUY_AMOUNTS.map((amount) => (
                <Button
                  key={amount}
                  variant="outline"
                  onClick={() => handleQuickBuy(amount)}
                  disabled={isLoading}
                  className="w-full"
                >
                  {amount} SOL
                </Button>
              ))}
            </div>

            <div className="flex gap-2">
              <Input
                type="number"
                min={MIN_SOL_AMOUNT}
                max={MAX_SOL_AMOUNT}
                step={0.001}
                value={customBuyAmount}
                onChange={(e) => setCustomBuyAmount(e.target.value)}
                placeholder="Custom amount (SOL)"
                disabled={isLoading}
              />
              <Button
                onClick={handleCustomBuy}
                disabled={isLoading || !customBuyAmount || parseFloat(customBuyAmount) <= 0}
              >
                Buy
              </Button>
            </div>
          </TabsContent>

          <TabsContent value="sell" className="space-y-4">
            <div className="grid grid-cols-2 gap-2">
              {QUICK_SELL_PERCENTAGES.map((percentage) => (
                <Button
                  key={percentage}
                  variant="outline"
                  onClick={() => handleQuickSell(percentage)}
                  disabled={isLoading || tokenBalance <= 0}
                  className="w-full"
                >
                  {percentage}%
                </Button>
              ))}
            </div>

            <div className="flex gap-2">
              <Input
                type="number"
                min={0}
                max={tokenBalance}
                step={0.000001}
                value={customSellAmount}
                onChange={(e) => setCustomSellAmount(e.target.value)}
                placeholder={`Amount (${token.symbol})`}
                disabled={isLoading}
              />
              <Button
                onClick={handleCustomSell}
                disabled={isLoading || !customSellAmount || parseFloat(customSellAmount) <= 0}
              >
                Sell
              </Button>
            </div>

            <div className="text-sm text-muted-foreground text-center">
              Available: {token.balance} {token.symbol}
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </>
  );
};

================
File: src/components/error/RecoveryBoundary.tsx
================
import React, { useState } from 'react'
import { ErrorBoundary } from 'react-error-boundary'
import { Button } from '@/components/ui/button'
import type { ReactNode } from 'react'
import { TradeExecutionForm } from '@/components/trading/TradeExecutionForm'

interface RecoveryBoundaryProps {
    children: ReactNode
    retryFailedTrade: () => void
}

export const RecoveryBoundary = ({
    children,
    retryFailedTrade
}: RecoveryBoundaryProps) => (
    <ErrorBoundary
        fallbackRender={({ error, resetErrorBoundary }) => (
            <div className="p-4 bg-destructive/10">
                <h3 className="text-lg font-semibold mb-2">Trade Execution Failed</h3>
                <p className="text-sm text-muted-foreground mb-4">{error.message}</p>
                <Button
                    onClick={() => {
                        resetErrorBoundary()
                        retryFailedTrade()
                    }}
                >
                    Retry Trade
                </Button>
            </div>
        )}
    >
        {children}
    </ErrorBoundary>
)

export default RecoveryBoundary

================
File: src/components/layout/sidebar.tsx
================
"use client"

import React from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { 
  BarChart2, 
  WalletCards, 
  Search, 
  Settings,
  Menu
} from 'lucide-react'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { WatchlistButton } from '@/components/watchlist/watchlist-button'
import { ThemeToggle } from '@/components/theme-toggle'
import { Separator } from '@/components/ui/separator'

const NAVIGATION_ITEMS = [
  {
    label: 'Trading',
    href: '/trading',
    icon: BarChart2
  },
  {
    label: 'Tracked Wallets',
    href: '/tracked-wallets',
    icon: WalletCards
  },
  {
    label: 'Wallet Lookup',
    href: '/wallet-lookup',
    icon: Search
  },
  {
    label: 'Settings',
    href: '/settings',
    icon: Settings
  }
]

export function Sidebar() {
  const pathname = usePathname()
  const [isCollapsed, setIsCollapsed] = React.useState(false)
  
  return (
    <>
      <aside 
        className={cn(
          "relative flex h-screen flex-col border-r bg-background",
          isCollapsed ? "w-16" : "w-64"
        )}
      >
        <div className="flex h-14 items-center border-b px-4">
          <Button
            variant="ghost"
            size="icon"
            className="mr-2"
            onClick={() => setIsCollapsed(!isCollapsed)}
          >
            <Menu className="h-5 w-5" />
          </Button>
          {!isCollapsed && <span className="font-semibold">Trading App</span>}
        </div>
        
        <nav className="flex-1 space-y-1 p-2">
          {NAVIGATION_ITEMS.map(({ href, icon: Icon, label }) => (
            <Link
              key={href}
              href={href}
              className={cn(
                "flex items-center gap-x-3 rounded-md px-3 py-2 text-sm font-medium transition-colors",
                pathname === href 
                  ? "bg-accent text-accent-foreground" 
                  : "text-muted-foreground hover:bg-accent/50"
              )}
            >
              <Icon className="h-5 w-5" />
              {!isCollapsed && <span>{label}</span>}
            </Link>
          ))}
        </nav>

        <div className="p-2 space-y-2">
          <Separator />
          {!isCollapsed && <WatchlistButton />}
          <ThemeToggle isCollapsed={isCollapsed} />
        </div>
      </aside>
      
      {!isCollapsed && (
        <div 
          className="fixed inset-0 z-30 bg-background/80 backdrop-blur-sm lg:hidden"
          onClick={() => setIsCollapsed(true)}
        />
      )}
    </>
  )
}

================
File: src/components/layout/watchlist-panel.tsx
================
"use client"

import React, { useEffect, useState } from 'react'
import { 
  Sheet, 
  SheetContent, 
  SheetHeader, 
  SheetTitle, 
  SheetTrigger 
} from '@/components/ui/sheet'
import { 
  Card, 
  CardContent 
} from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { 
  Trash2, 
  Star 
} from 'lucide-react'
import { useWatchlistStore } from '@/stores/watchlist-store'
import { ScrollArea } from '@/components/ui/scroll-area'
import { toast } from 'sonner'
import { CreateWatchlistDialog } from '@/components/watchlist/create-watchlist-dialog'
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'

interface WatchlistPanelProps {
  children?: React.ReactNode
}

export function WatchlistPanel({ children }: WatchlistPanelProps) {
  const { 
    tokens, 
    removeToken, 
    fetchWatchlists,
    watchlists,
    activeWatchlistId,
    setActiveWatchlist,
    fetchWatchlistTokens
  } = useWatchlistStore()

  useEffect(() => {
    fetchWatchlists()
  }, [fetchWatchlists])

  useEffect(() => {
    if (activeWatchlistId) {
      fetchWatchlistTokens()
    }
  }, [activeWatchlistId, fetchWatchlistTokens])

  const handleRemoveToken = async (address: string) => {
    try {
      await removeToken(address)
      toast.success('Token removed from watchlist')
    } catch (error) {
      toast.error('Failed to remove token')
    }
  }

  const handleClearWatchlist = async () => {
    try {
      //await clearWatchlist()
      toast.success('Watchlist cleared')
    } catch (error) {
      toast.error('Failed to clear watchlist')
    }
  }
console.log("tokens", tokens)
  return (
    <Sheet>
      <SheetTrigger asChild>
        {children || (
          <Button 
            variant="ghost" 
            size="icon"
          >
            <Star className="h-6 w-6" />
          </Button>
        )}
      </SheetTrigger>
      <SheetContent 
        side="bottom" 
        className="h-[500px] overflow-hidden"
      >
        <SheetHeader>
          <SheetTitle className="flex justify-between items-center">
            <span>Watchlist</span>
            <div className="flex items-center gap-2">
              <CreateWatchlistDialog />
              {tokens.length > 0 && (
                <Button 
                  variant="destructive" 
                  size="sm"
                  onClick={handleClearWatchlist}
                >
                  Clear All
                </Button>
              )}
            </div>
          </SheetTitle>
        </SheetHeader>

        {/* Watchlist Selector */}
        <div className="my-4">
          <Select 
            value={activeWatchlistId} 
            onValueChange={setActiveWatchlist}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select a watchlist" />
            </SelectTrigger>
            <SelectContent>
            {watchlists.map((list, index) => (
    <SelectItem 
      key={list.id || `watchlist-${index}`} 
      value={list.id || `watchlist-${index}`}
    >
      {list.name}
    </SelectItem>
  ))}
</SelectContent>
          </Select>
        </div>
        
        <Card className="mt-4 h-[calc(100%-200px)]">
          <CardContent className="p-0">
            {tokens.length === 0 ? (
              <div className="flex items-center justify-center h-full text-muted-foreground">
                <p>No tokens in watchlist</p>
              </div>
            ) : (
              <ScrollArea className="h-full">
                <div className="divide-y" key={activeWatchlistId}>
                  {tokens.map((token) => (
                    <div 
                      key={token.address} 
                      className="flex items-center justify-between p-4 hover:bg-accent"
                    >
                      <div>
                        <div className="font-medium">{token.symbol}</div>
                        <div className="text-sm text-muted-foreground">
                          {token.name}
                        </div>
                      </div>
                      <Button 
                        variant="ghost" 
                        size="icon"
                        onClick={() => handleRemoveToken(token.address)}
                      >
                        <Trash2 className="h-4 w-4 text-destructive" />
                      </Button>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            )}
          </CardContent>
        </Card>
      </SheetContent>
    </Sheet>
  )
}

================
File: src/components/market/market-data-widget.tsx
================
// src/components/market/market-data-widget.tsx
"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { LoadingSpinner } from "@/components/ui/loading"
import { useWalletTrackerStore } from "@/stores/wallet-tracker-store"
import { formatBalance } from "@/lib/utils"
import { BadgeDelta } from "@tremor/react"
import { useRef } from "react"

interface MarketStat {
  title: string
  value: string
  change?: number
}

const validatePrice = (price: number, previousPrice: number): boolean => {
  const maxChangePercent = 5 // Max 5% change per update
  const change = Math.abs((price - previousPrice) / previousPrice * 100)
  return change <= maxChangePercent
}

const smoothPrice = (current: number, previous: number): number => {
  const smoothingFactor = 0.2
  return previous + (current - previous) * smoothingFactor
}

export function MarketDataWidget() {
  const { serverWallet, isLoading } = useWalletTrackerStore()
  const previousPrices = useRef<Map<string, number>>(new Map())

  const getStablePrice = (token: TokenInfo): number => {
    const currentPrice = token.price_sol || 0
    const previousPrice = previousPrices.current.get(token.mint) || currentPrice
    
    if (!validatePrice(currentPrice, previousPrice)) {
      console.warn(`Invalid price change for ${token.symbol}: ${currentPrice}`)
      return previousPrice
    }

    const smoothed = smoothPrice(currentPrice, previousPrice)
    previousPrices.current.set(token.mint, smoothed)
    return smoothed
  }

  const stats: MarketStat[] = [
    {
      title: "Portfolio Value",
      value: formatBalance(serverWallet?.balance || 0) + " SOL",
      change: 2.5
    },
    {
      title: "24h Volume",
      value: "$1.2M",
      change: -0.4
    },
    {
      title: "Active Positions",
      value: serverWallet?.tokens?.length.toString() || "0"
    }
  ]

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex justify-between items-center">
          <span>Market Overview</span>
          {isLoading && <LoadingSpinner size="sm" />}
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-3">
          {stats.map((stat, idx) => (
            <div
              key={`${stat.title}-${idx}`}
              className="flex flex-col space-y-1 rounded-lg bg-accent/50 p-4"
            >
              <p className="text-sm text-muted-foreground">{stat.title}</p>
              <div className="flex items-center justify-between">
                <p className="text-2xl font-semibold">{stat.value}</p>
                {stat.change !== undefined && (
                  <BadgeDelta
                    deltaType={stat.change >= 0 ? "increase" : "decrease"}
                    className="text-xs"
                  >
                    {Math.abs(stat.change)}%
                  </BadgeDelta>
                )}
              </div>
            </div>
          ))}
        </div>

        <div className="mt-4">
          <div className="rounded-lg border bg-card">
            <div className="flex items-center p-4 text-sm">
              <div className="flex-1">Token</div>
              <div className="flex-1 text-right">Price</div>
              <div className="flex-1 text-right">Change</div>
            </div>
            {serverWallet?.tokens?.map((token) => (
              <div
                key={token.mint}
                className="flex items-center border-t p-4 text-sm hover:bg-accent/50 transition-colors"
              >
                <div className="flex-1 font-medium">{token.symbol}</div>
                <div className="flex-1 text-right">
                  {formatBalance(getStablePrice(token))} SOL
                </div>
                <div className="flex-1 text-right">
                  <BadgeDelta deltaType="increase" size="xs">
                    2.5%
                  </BadgeDelta>
                </div>
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

================
File: src/components/market/order-book.tsx
================
// src/components/market/order-book.tsx
import { OrderBookProps, OrderBookEntry } from "@/types/market"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { LoadingOverlay } from "@/components/ui/loading"
import { cn } from "@/lib/utils"

export const OrderBook = ({ bids, asks, isLoading, depth = 10 }: OrderBookProps) => {
    const maxTotal = Math.max(
        ...bids.map((bid) => bid.total),
        ...asks.map((ask) => ask.total)
    )

    const OrderRow = ({
        entry,
        side,
        maxTotal
    }: {
        entry: OrderBookEntry
        side: "bid" | "ask"
        maxTotal: number
    }) => {
        const percentage = (entry.total / maxTotal) * 100
        const bgColorClass = side === "bid"
            ? "bg-green-500/10"
            : "bg-red-500/10"

        return (
            <div className="relative grid grid-cols-3 py-1 text-sm">
                <div
                    className={cn(
                        "absolute inset-0 opacity-50",
                        bgColorClass
                    )}
                    style={{
                        width: `${percentage}%`,
                        [side === "bid" ? "left" : "right"]: 0
                    }}
                />
                <span className={cn(
                    "z-10",
                    side === "bid" ? "text-green-500" : "text-red-500"
                )}>
                    {entry.price.toFixed(2)}
                </span>
                <span className="z-10 text-center">{entry.size.toFixed(4)}</span>
                <span className="z-10 text-right">{entry.total.toFixed(4)}</span>
            </div>
        )
    }

    return (
        <LoadingOverlay loading={isLoading}>
            <Card>
                <CardHeader>
                    <CardTitle>Order Book</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="space-y-2">
                        <div className="grid grid-cols-3 text-xs text-muted-foreground">
                            <span>Price</span>
                            <span className="text-center">Size</span>
                            <span className="text-right">Total</span>
                        </div>

                        <div className="space-y-1">
                            {asks.slice(0, depth).reverse().map((ask, i) => (
                                <OrderRow
                                    key={i}
                                    entry={ask}
                                    side="ask"
                                    maxTotal={maxTotal}
                                />
                            ))}
                        </div>

                        <div className="border-y border-border py-2 text-center font-medium">
                            {((bids[0]?.price + asks[0]?.price) / 2).toFixed(2)}
                        </div>

                        <div className="space-y-1">
                            {bids.slice(0, depth).map((bid, i) => (
                                <OrderRow
                                    key={i}
                                    entry={bid}
                                    side="bid"
                                    maxTotal={maxTotal}
                                />
                            ))}
                        </div>
                    </div>
                </CardContent>
            </Card>
        </LoadingOverlay>
    )
}

================
File: src/components/market/token-list.tsx
================
// src/components/market/token-list.tsx
"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { LoadingOverlay } from "@/components/ui/loading"
import { cn, formatBalance } from "@/lib/utils"
import { TokenInfo } from "@/types"
import { ArrowDown, ArrowUp } from "lucide-react"

interface TokenListProps {
    tokens: TokenInfo[]
    isLoading: boolean
    onSelectToken?: (token: TokenInfo) => void
}

interface TokenItemProps {
    token: TokenInfo
    onClick?: () => void
}

const TokenItem = ({ token, onClick }: TokenItemProps) => {
    const priceChange = Math.random() * 10 - 5 // Placeholder for price change
    const isPositive = priceChange >= 0

    return (
        <div
            onClick={onClick}
            className={cn(
                "flex items-center justify-between p-3 hover:bg-accent rounded-lg transition-colors cursor-pointer",
                "border-b last:border-0 border-border"
            )}
        >
            <div className="flex items-center gap-3">
                <div className="flex-1">
                    <div className="font-medium">{token.symbol}</div>
                    <div className="text-sm text-muted-foreground truncate max-w-[200px]">
                        {token.name}
                    </div>
                </div>
            </div>

            <div className="text-right">
                <div className="font-medium">
                    {formatBalance(parseFloat(token.raw_balance), token.decimals)}
                </div>
                <div
                    className={cn(
                        "text-sm flex items-center gap-1 justify-end",
                        isPositive ? "text-green-500" : "text-red-500"
                    )}
                >
                    {isPositive ? (
                        <ArrowUp className="h-3 w-3" />
                    ) : (
                        <ArrowDown className="h-3 w-3" />
                    )}
                    {Math.abs(priceChange).toFixed(2)}%
                </div>
            </div>
        </div>
    )
}

export function TokenList({ tokens, isLoading, onSelectToken }: TokenListProps) {
    if (!tokens?.length && !isLoading) {
        return (
            <Card>
                <CardContent className="p-8 text-center text-muted-foreground">
                    No tokens found
                </CardContent>
            </Card>
        )
    }

    return (
        <LoadingOverlay loading={isLoading}>
            <Card>
                <CardHeader>
                    <CardTitle>Tokens</CardTitle>
                </CardHeader>
                <CardContent className="p-0">
                    {tokens.map((token) => (
                        <TokenItem
                            key={token.mint}
                            token={token}
                            onClick={() => onSelectToken?.(token)}
                        />
                    ))}
                </CardContent>
            </Card>
        </LoadingOverlay>
    )
}

================
File: src/components/onboarding/HelpSystem.tsx
================
import {
    HoverCard,
    HoverCardTrigger,
    HoverCardContent,
} from "@/components/ui/hover-card"
import { Label } from "@/components/ui/label"

export const HelpSystem = () => (
    <HoverCard>
        <HoverCardTrigger className="cursor-help">
            <Label>Risk Tolerance</Label>
        </HoverCardTrigger>
        <HoverCardContent side="top" className="max-w-[300px]">
            <p className="text-sm">
                Lower values mean safer trades. Start conservative until you're comfortable.
            </p>
        </HoverCardContent>
    </HoverCard>
)

================
File: src/components/settings/copy-trade-settings-panel.tsx
================
"use client"

import { useState, useEffect } from "react";
import { Switch } from "@/components/ui/switch";
import { Input } from "@/components/ui/input";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { useWalletTrackerStore } from "@/stores/wallet-tracker-store";
import { Skeleton } from "@/components/ui/skeleton";
import { toast } from "sonner";
import { CopyTradeSettings } from "@/types";

const convertSettingsToFormState = (settings: CopyTradeSettings) => ({
  is_enabled: Boolean(settings?.is_enabled),
  trade_amount_sol: settings?.trade_amount_sol?.toString() || "",
  max_slippage: settings?.max_slippage
    ? (settings.max_slippage * 100).toString()
    : "",
  max_open_positions: settings?.max_open_positions?.toString() || "",
  allow_additional_buys: Boolean(settings?.allow_additional_buys),
  use_allowed_tokens_list: Boolean(settings?.use_allowed_tokens_list),
  min_sol_balance: settings?.min_sol_balance?.toString() || "",
});

export const CopyTradeSettingsPanel = () => {
  const {
    copyTradeSettings: storedSettings,
    setCopyTradeSettings,
    fetchCopyTradeSettings,
    isLoading,
  } = useWalletTrackerStore();

  const [formState, setFormState] = useState<ReturnType<typeof convertSettingsToFormState> | null>(null);
  
  useEffect(() => {
    const initializeSettings = async () => {
      try {
        await fetchCopyTradeSettings();
      } catch (error) {
        toast.error('Failed to fetch settings');
      }
    };

    initializeSettings();
  }, [fetchCopyTradeSettings]);

  useEffect(() => {
    if (storedSettings) {
      const newFormState = convertSettingsToFormState(storedSettings);
      setFormState(newFormState);
    }
  }, [storedSettings]);

  const handleUpdateSettings = (key: string, value: string | boolean) => {
    setFormState((prev) => {
      if (!prev) return prev;
      return {
        ...prev,
        [key]: value,
      };
    });
  };

  const handleSaveSettings = async () => {
    if (!storedSettings?.tracked_wallet_id || !formState) return;
    
    try {
      const settingsToSave = {
        ...storedSettings,
        is_enabled: formState.is_enabled,
        trade_amount_sol: formState.trade_amount_sol
          ? parseFloat(formState.trade_amount_sol)
          : null,
        max_slippage: formState.max_slippage
          ? parseFloat(formState.max_slippage) / 100
          : null,
        max_open_positions: formState.max_open_positions
          ? parseInt(formState.max_open_positions)
          : null,
        allow_additional_buys: formState.allow_additional_buys,
        use_allowed_tokens_list: formState.use_allowed_tokens_list,
        min_sol_balance: formState.min_sol_balance
          ? parseFloat(formState.min_sol_balance)
          : null,
      };

      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/copy_trade_settings`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(settingsToSave),
        }
      );

      if (!response.ok) throw new Error("Failed to save settings");
      const savedSettings = await response.json();
      setCopyTradeSettings(savedSettings);
      toast.success("Settings saved successfully");
    } catch (error) {
      console.error("Save settings error:", error);
      toast.error("Failed to save settings");
    }
  };

  if (isLoading || !storedSettings) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>
            <Skeleton className="h-6 w-32" />
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex justify-between items-center">
          <span>Copy Trade Settings</span>
          <div className="flex items-center gap-2">
            <span className="text-sm text-muted-foreground">Enabled</span>
            <Switch
              checked={formState?.is_enabled || false}
              onCheckedChange={(checked) =>
                handleUpdateSettings("is_enabled", checked)
              }
            />
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="grid gap-6">
          <div className="space-y-2">
            <Label>Trade Amount (SOL)</Label>
            <Input
              type="number"
              value={formState?.trade_amount_sol || ""}
              onChange={(e) =>
                handleUpdateSettings("trade_amount_sol", e.target.value)
              }
              placeholder="Enter amount in SOL"
              step="0.001"
              min="0"
            />
          </div>

          <div className="space-y-2">
            <Label>Max Slippage (%)</Label>
            <Input
              type="number"
              value={formState?.max_slippage || ""}
              onChange={(e) =>
                handleUpdateSettings("max_slippage", e.target.value)
              }
              placeholder="Enter max slippage %"
              step="0.1"
              min="0"
              max="100"
            />
          </div>

          <div className="space-y-2">
            <Label>Max Open Positions</Label>
            <Input
              type="number"
              value={formState?.max_open_positions || ""}
              onChange={(e) =>
                handleUpdateSettings("max_open_positions", e.target.value)
              }
              placeholder="Enter max positions"
              min="1"
              step="1"
            />
          </div>

          <div className="flex items-center justify-between">
            <Label>Allow Additional Buys</Label>
            <Switch
              checked={formState?.allow_additional_buys || false}
              onCheckedChange={(checked) =>
                handleUpdateSettings("allow_additional_buys", checked)
              }
            />
          </div>

          <div className="flex items-center justify-between">
            <Label>Use Allowed Tokens List</Label>
            <Switch
              checked={formState?.use_allowed_tokens_list || false}
              onCheckedChange={(checked) =>
                handleUpdateSettings("use_allowed_tokens_list", checked)
              }
            />
          </div>
        </div>

        <Button
          className="w-full"
          onClick={handleSaveSettings}
        >
          Save Settings
        </Button>
      </CardContent>
    </Card>
  );
};

================
File: src/components/settings/copy-trade-settings.tsx
================
"use client"

import { useEffect } from 'react'
import { useSettingsStore } from '@/stores/settings-store'
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import { Input } from '@/components/ui/input'
import { Switch } from '@/components/ui/switch'
import { Button } from '@/components/ui/button'
import { SettingsSkeletons } from '@/components/ui/loading-skeleton'

export function CopyTradeSettings() {
    const { copyTradeSettings, isLoading, fetchSettings, updateSettings } = useSettingsStore()

    useEffect(() => {
        fetchSettings()
    }, [fetchSettings])

    if (isLoading) {
        return <SettingsSkeletons />
    }

    return (
        <Card className="animate-in fade-in slide-in-from-bottom duration-500">
            <CardHeader>
                <CardTitle>Copy Trade Settings</CardTitle>
                <CardDescription>Configure your copy trading preferences</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
                <div className="space-y-2 animate-in fade-in duration-700 delay-200">
                    <Label>Max Slippage (%)</Label>
                    <Input
                        type="number"
                        value={copyTradeSettings?.maxSlippage}
                        onChange={(e) => updateSettings({ maxSlippage: Number(e.target.value) })}
                    />
                    <p className="text-sm text-muted-foreground">Maximum allowed slippage for trades</p>
                </div>

                <div className="space-y-2 animate-in fade-in duration-700 delay-300">
                    <Label>Min Trade Size (SOL)</Label>
                    <Input
                        type="number"
                        value={copyTradeSettings?.minTradeSize}
                        onChange={(e) => updateSettings({ minTradeSize: Number(e.target.value) })}
                    />
                    <p className="text-sm text-muted-foreground">Minimum trade size to copy</p>
                </div>

                <div className="space-y-2 animate-in fade-in duration-700 delay-400">
                    <Label>Max Trade Size (SOL)</Label>
                    <Input
                        type="number"
                        value={copyTradeSettings?.maxTradeSize}
                        onChange={(e) => updateSettings({ maxTradeSize: Number(e.target.value) })}
                    />
                    <p className="text-sm text-muted-foreground">Maximum trade size to copy</p>
                </div>

                <div className="flex items-center justify-between animate-in fade-in duration-700 delay-500">
                    <div className="space-y-0.5">
                        <Label>Enable Notifications</Label>
                        <p className="text-sm text-muted-foreground">Get notified about copy trades</p>
                    </div>
                    <Switch
                        checked={copyTradeSettings?.enableNotifications}
                        onCheckedChange={(checked) => updateSettings({ enableNotifications: checked })}
                    />
                </div>

                <div className="flex items-center justify-between animate-in fade-in duration-700 delay-600">
                    <div className="space-y-0.5">
                        <Label>Auto Trade</Label>
                        <p className="text-sm text-muted-foreground">Automatically copy trades</p>
                    </div>
                    <Switch
                        checked={copyTradeSettings?.autoTrade}
                        onCheckedChange={(checked) => updateSettings({ autoTrade: checked })}
                    />
                </div>

                <Button
                    className="w-full animate-in fade-in duration-700 delay-700"
                    onClick={() => console.log('Save settings')}
                >
                    Save Settings
                </Button>
            </CardContent>
        </Card>
    )
}

================
File: src/components/settings/exchange-settings.tsx
================
"use client"

import { useState } from 'react'
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { toast } from 'sonner'

export function ExchangeSettings() {
  const [defaultDex, setDefaultDex] = useState<string>('jupiter')
  const [autoSlippage, setAutoSlippage] = useState(true)
  const [slippageTolerance, setSlippageTolerance] = useState('1.0')

  const handleSaveSettings = () => {
    // TODO: Implement settings save
    toast.success('Exchange settings saved')
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Exchange Settings</CardTitle>
        <CardDescription>
          Configure your default trading preferences
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-2">
          <Label>Default DEX</Label>
          <Select value={defaultDex} onValueChange={setDefaultDex}>
            <SelectTrigger>
              <SelectValue placeholder="Select default DEX" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="jupiter">Jupiter</SelectItem>
              <SelectItem value="raydium">Raydium</SelectItem>
              <SelectItem value="pump_fun">Pump.fun</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label>Auto Slippage</Label>
              <p className="text-sm text-muted-foreground">
                Automatically adjust slippage tolerance based on market conditions
              </p>
            </div>
            <Switch
              checked={autoSlippage}
              onCheckedChange={setAutoSlippage}
            />
          </div>

          {!autoSlippage && (
            <div className="space-y-2">
              <Label>Slippage Tolerance (%)</Label>
              <Input
                type="number"
                value={slippageTolerance}
                onChange={(e) => setSlippageTolerance(e.target.value)}
                step="0.1"
                min="0.1"
                max="50"
              />
            </div>
          )}
        </div>

        <Button onClick={handleSaveSettings} className="w-full">
          Save Settings
        </Button>
      </CardContent>
    </Card>
  )
}

================
File: src/components/settings/general-settings.tsx
================
// src/components/settings/general-settings.tsx
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'
import { ThemeToggle } from '../theme-toggle'

export function GeneralSettings() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Appearance</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="space-y-1">
            <h3 className="font-medium">Theme</h3>
            <p className="text-sm text-muted-foreground">
              Select your preferred theme
            </p>
          </div>
          <ThemeToggle />
        </div>
      </CardContent>
    </Card>
  )
}

================
File: src/components/settings/settings-tabs.tsx
================
// src/components/settings/settings-tabs.tsx
"use client"

import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { GeneralSettings } from './general-settings'
import { CopyTradeSettingsPanel } from './copy-trade-settings-panel'
import { ExchangeSettings } from './exchange-settings'

export function SettingsTabs() {
  return (
    <Tabs defaultValue="general" className="space-y-4">
      <TabsList>
        <TabsTrigger value="general">General</TabsTrigger>
        <TabsTrigger value="trading">Trading</TabsTrigger>
        <TabsTrigger value="exchange">Exchange</TabsTrigger>
      </TabsList>

      <TabsContent value="general" className="space-y-4">
        <GeneralSettings />
      </TabsContent>

      <TabsContent value="trading" className="space-y-4">
        <CopyTradeSettingsPanel />
      </TabsContent>

      <TabsContent value="exchange" className="space-y-4">
        <ExchangeSettings />
      </TabsContent>
    </Tabs>
  )
}

================
File: src/components/tracked-wallets/tracked-wallets-panel.tsx
================
"use client"

import { useState, useEffect } from 'react'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle
} from '@/components/ui/card'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select'
import { TrackedWallet, WalletUpdate, TokenInfo } from '@/types'
import { API_BASE_URL } from '@/config/constants'
import { TokenRow } from '@/components/dashboard/token-row'
import { TradePanel } from '@/components/dashboard/trade-panel'
import { Skeleton } from '@/components/ui/skeleton'
import { toast } from 'sonner'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { TradeType } from '@/types/ui'
import { DexType } from '@/types/crypto'
import { useWalletTrackerStore } from '@/stores/wallet-tracker-store'

export function TrackedWalletsPanel() {
  const [trackedWallets, setTrackedWallets] = useState<TrackedWallet[]>([])
  const [selectedWallet, setSelectedWallet] = useState<TrackedWallet | null>(null)
  const [walletDetails, setWalletDetails] = useState<WalletUpdate | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [selectedToken, setSelectedToken] = useState<TokenInfo | null>(null)
  const [isTradeDialogOpen, setIsTradeDialogOpen] = useState(false)
  const [isTradeLoading, setIsTradeLoading] = useState(false)

  const { executeBuy, executeSell, copyTradeSettings } = useWalletTrackerStore()
  useEffect(() => {
    fetchTrackedWallets()
  }, [])

  const fetchTrackedWallets = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/tracked_wallets`)
      if (!response.ok) throw new Error('Failed to fetch tracked wallets')

      const wallets = await response.json()
      setTrackedWallets(wallets)

      if (wallets.length > 0) {
        setSelectedWallet(wallets[0])
      }
    } catch (error) {
      toast.error('Failed to load tracked wallets')
    }
  }

  const fetchWalletDetails = async (walletAddress: string) => {
    setIsLoading(true)
    try {
      const response = await fetch(`${API_BASE_URL}/wallet/${walletAddress}`)
      if (!response.ok) throw new Error('Failed to fetch wallet details')

      const details = await response.json()
      setWalletDetails({
        balance: details.sol_balance,
        address: details.address,
        tokens: details.tokens
      })
    } catch (error) {
      console.error('Error fetching wallet details:', error)
      toast.error('Failed to load wallet details')
      setWalletDetails(null)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    if (selectedWallet) {
      fetchWalletDetails(selectedWallet.wallet_address)
    }
  }, [selectedWallet])

  const handleWalletSelect = (walletAddress: string) => {
    const wallet = trackedWallets.find(w => w.wallet_address === walletAddress)
    if (wallet) {
      setSelectedWallet(wallet)
    }
  }

  // const handleTrade = async (type: 'buy' | 'sell', amount: number, dex: string) => {
  //   setIsTradeLoading(true)
  //   try {
  //     const endpoint = type === 'buy' ? 'buy_token' : 'sell_token'
  //     const response = await fetch(`${API_BASE_URL}/${endpoint}`, {
  //       method: 'POST',
  //       headers: { 'Content-Type': 'application/json' },
  //       body: JSON.stringify({
  //         token_address: selectedToken?.address,
  //         sol_quantity: type === 'buy' ? amount : undefined,
  //         token_quantity: type === 'sell' ? amount : undefined,
  //         slippage_tolerance: 0.2,
  //         dex: dex
  //       })
  //     })

  //     if (!response.ok) throw new Error('Trade failed')
  //     toast.success(`${type.charAt(0).toUpperCase() + type.slice(1)} order placed successfully`)
  //     setIsTradeDialogOpen(false)
  //   } catch (error) {
  //     toast.error('Failed to place trade order')
  //     console.error('Trade error:', error)
  //   } finally {
  //     setIsTradeLoading(false)
  //   }
  // }

  const handleTokenTrade = (token: TokenInfo) => {
    setSelectedToken(token);
    setIsTradeDialogOpen(true);
    handleTrade("buy", 0.000001, "jupiter")
  }
  const handleTrade = async (type: TradeType, amount: number, dex: DexType) => {
    try {
      if (type === "buy") {
        if (!selectedToken?.mint) {
          toast.error("No token address provided");
          return;
        }

        await executeBuy(
          selectedToken?.mint,
          amount,
          copyTradeSettings?.max_slippage || 0.2,
          dex
        );
      } else {
        if (!selectedToken?.mint) {
          toast.error("No token selected for sell");
          return;
        }

        await executeSell(
          selectedToken.mint,
          amount,
          copyTradeSettings?.max_slippage || 0.2,
          dex
        );
      }

    } catch (error) {
      console.error("Trade failed:", error);
    } finally {
      setIsTradeDialogOpen(false)
    }
  };
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="text-center">Tracked Wallets</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="flex items-center justify-between mb-4">
          <Select
            value={selectedWallet?.wallet_address}
            onValueChange={handleWalletSelect}
          >
            <SelectTrigger className="w-full">
              <SelectValue placeholder="Select a wallet" />
            </SelectTrigger>
            <SelectContent>
              {trackedWallets.map((wallet, index) => (
                <SelectItem
                  key={`${wallet.wallet_address}-${index}`}
                  value={wallet.wallet_address}
                >
                  {wallet.wallet_address}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {isLoading ? (
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={`skeleton-${i}`} className="flex justify-between items-center">
                <div className="flex items-center gap-4">
                  <Skeleton className="h-12 w-12 rounded-full" />
                  <div className="space-y-2">
                    <Skeleton className="h-4 w-20" />
                    <Skeleton className="h-4 w-32" />
                  </div>
                </div>
                <div className="text-right">
                  <Skeleton className="h-4 w-24" />
                  <Skeleton className="h-4 w-16 mt-1" />
                </div>
              </div>
            ))}
          </div>
        ) : walletDetails ? (
          <>
            <div className="mb-4">
              <span>{walletDetails?.balance?.toFixed(4) || '0.0000'} SOL</span>
            </div>
            {walletDetails.tokens && walletDetails.tokens.length > 0 ? (
              walletDetails.tokens.map((token, index) => (
                <TokenRow
                  key={`${token.mint}-${index}`}
                  token={{
                    address: token.mint,
                    symbol: token.symbol,
                    name: token.name,
                    balance: token.raw_balance || '0',
                    market_cap: token.market_cap,
                    decimals: token.decimals
                  }}
                  onClickTrade={() => handleTokenTrade({
                    mint: token.mint,
                    symbol: token.symbol,
                    name: token.name,
                    raw_balance: token.raw_balance || '0',
                    market_cap: token.market_cap,
                    decimals: token.decimals
                  })}
                />
              ))
            ) : (
              <div className="text-center text-muted-foreground">
                No tokens found in this wallet
              </div>
            )}
          </>
        ) : (
          <div className="text-center text-muted-foreground">
            No wallet selected or wallet details not available
          </div>
        )}

        <Dialog open={isTradeDialogOpen} onOpenChange={setIsTradeDialogOpen}>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Trade Token</DialogTitle>
            </DialogHeader>
            {selectedToken && (
              <TradePanel
                token={{
                  address: selectedToken.mint,
                  symbol: selectedToken.symbol,
                  name: selectedToken.name,
                  balance: selectedToken.raw_balance || '0',
                  market_cap: selectedToken.market_cap,
                  decimals: selectedToken.decimals
                }}
                onTrade={handleTrade}
                isLoading={isTradeLoading}
              />
            )}
          </DialogContent>
        </Dialog>
      </CardContent>
    </Card>
  )
}

================
File: src/components/trading/FloatingActions.tsx
================
import { Button } from '@/components/ui/button'
import { Plus, Rocket, WalletCards } from 'lucide-react'
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from '@/components/ui/dropdown-menu'

export const FloatingActions = () => (
    <div className="fixed bottom-8 right-8 flex gap-2 items-center">
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <Button
                    variant="default"
                    size="lg"
                    className="rounded-full"
                >
                    {/* Add your content here */}
                </Button>
            </DropdownMenuTrigger>
        </DropdownMenu>
    </div>
)

================
File: src/components/trading/history.tsx
================
import { LoadingCard } from '@/components/ui/loading'

const TradeHistory = () => {
    const { trades, isLoading } = useTradeStore();

    return (
        <Card>
            <CardHeader>
                <CardTitle>Trade History</CardTitle>
            </CardHeader>
            <CardContent>
                {isLoading ? (
                    <LoadingCard rows={4} />
                ) : (
                    trades?.map((trade) => (
                        <TradeItem key={trade.id} trade={trade} />
                    ))
                )}
            </CardContent>
        </Card>
    );
};

================
File: src/components/trading/TradeConfirmation.tsx
================
import { useWebSocketStore } from '@/stores/websocket-store'
import { Trade } from '@/types/trading'

export const useTradeConfirm = () => {
    const { send } = useWebSocketStore()

    return (trade: Trade) => {
        send({
            type: 'CONFIRM_TRADE',
            id: trade.id,
            amount: trade.amount,
            token: trade.token
        })
    }
}

================
File: src/components/trading/TradeExecutionForm.tsx
================
export const TradeExecutionForm = () => {
    // ... form implementation ...
}

================
File: src/components/trading/TradeList.tsx
================
import { useRef, useEffect } from 'react'
import { TradeItem } from '@/types/trading'
import { useVirtualizer } from '@tanstack/react-virtual'
import { useSmartRefresh } from '@/hooks/useSmartRefresh'
import { fetchTrades } from '@/services/trade-service'

interface Props {
    trades: TradeItem[]
    onLoadMore: () => void
}

export function TradeList({ trades, onLoadMore }: Props) {
    const observerRef = useRef<IntersectionObserver | null>(null)
    const loadMoreRef = useRef<HTMLDivElement>(null)

    useEffect(() => {
        // Intersection observer implementation
    }, [onLoadMore])

    return (
        <div className="space-y-4">
            {trades.map((trade) => (
                <TradeListItem key={trade.id} trade={trade} />
            ))}
            <div ref={loadMoreRef} className="h-4" />
        </div>
    )
}

interface TradeListItemProps {
    trade: TradeItem
}

function TradeListItem({ trade }: TradeListItemProps) {
    return (
        <div className="p-4 border rounded-lg">
            <div className="flex justify-between items-center">
                <span>{trade.pair}</span>
                <span>{trade.side.toUpperCase()}</span>
            </div>
        </div>
    )
}

export const TradeListOld = () => {
    const { data: trades = [] } = useSmartRefresh('trades', fetchTrades)
    const parentRef = useRef<HTMLDivElement>(null)

    const virtualizer = useVirtualizer({
        count: trades.length,
        getScrollElement: () => parentRef.current,
        estimateSize: () => 64,
        overscan: 5
    })

    return (
        <div ref={parentRef} className="h-[600px] overflow-auto">
            <div style={{ height: virtualizer.getTotalSize() }}>
                {virtualizer.getVirtualItems().map((virtualItem) => (
                    <div
                        key={virtualItem.key}
                        style={{
                            position: 'absolute',
                            top: 0,
                            left: 0,
                            width: '100%',
                            height: `${virtualItem.size}px`,
                            transform: `translateY(${virtualItem.start}px)`
                        }}
                    >
                        <TradeListItem trade={trades[virtualItem.index]} />
                    </div>
                ))}
            </div>
        </div>
    )
}

================
File: src/components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: src/components/ui/collapsible.tsx
================
"use client"

import * as React from "react"
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.Trigger

const CollapsibleContent = CollapsiblePrimitive.Content

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: src/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/loading-dots.tsx
================
// src/components/ui/loading-dots.tsx
import { cn } from "@/lib/utils"

interface LoadingDotsProps {
    size?: "small" | "default" | "large"
    color?: "default" | "primary" | "secondary"
    className?: string
}

export function LoadingDots({
    size = "default",
    color = "default",
    className
}: LoadingDotsProps) {
    const sizeClasses = {
        small: "h-1 w-1",
        default: "h-2 w-2",
        large: "h-3 w-3"
    }

    const colorClasses = {
        default: "bg-current",
        primary: "bg-primary",
        secondary: "bg-secondary"
    }

    return (
        <div className={cn("flex items-center space-x-1", className)}>
            {[...Array(3)].map((_, i) => (
                <div
                    key={i}
                    className={cn(
                        "rounded-full animate-pulse",
                        sizeClasses[size],
                        colorClasses[color]
                    )}
                    style={{
                        animationDelay: `${i * 150}ms`
                    }}
                />
            ))}
        </div>
    )
}

export function DotsLoading() {
    return (
        <div className="flex items-center justify-center p-4">
            <LoadingDots />
        </div>
    )
}

export function LoadingText({ children }: { children: React.ReactNode }) {
    return (
        <div className="flex items-center gap-2">
            {children}
            <LoadingDots size="small" />
        </div>
    )
}

================
File: src/components/ui/loading-skeleton.tsx
================
import { Skeleton } from "@/components/ui/skeleton"
import { Card, CardHeader, CardContent } from "@/components/ui/card"

export const TokenSkeletons = () => {
  return (
    <Card className="p-4">
      <div className="flex justify-between items-center mb-4">
        <Skeleton className="h-4 w-[100px]" />
        <Skeleton className="h-4 w-[60px]" />
      </div>
      <div className="space-y-3">
        {Array.from({ length: 5 }).map((_, i) => (
          <div key={i} className="flex justify-between items-center">
            <div>
              <Skeleton className="h-4 w-[120px] mb-2" />
              <Skeleton className="h-4 w-[80px]" />
            </div>
            <div className="text-right">
              <Skeleton className="h-4 w-[100px] mb-2" />
              <Skeleton className="h-4 w-[60px]" />
            </div>
          </div>
        ))}
      </div>
    </Card>
  )
}

export const WalletBalanceSkeletons = () => {
  return (
    <Card className="p-4">
      <div className="flex justify-between items-center mb-6">
        <Skeleton className="h-5 w-[150px]" />
        <Skeleton className="h-5 w-[100px]" />
      </div>
      {Array.from({ length: 3 }).map((_, i) => (
        <div key={i} className="flex items-center gap-4 mb-4">
          <div className="flex-1">
            <Skeleton className="h-4 w-[140px] mb-2" />
            <Skeleton className="h-4 w-[90px]" />
          </div>
          <div className="text-right">
            <Skeleton className="h-4 w-[80px] mb-2" />
            <Skeleton className="h-4 w-[60px]" />
          </div>
        </div>
      ))}
    </Card>
  )
}

export const ChartSkeletons = () => {
  return (
    <Card className="p-4">
      <div className="flex justify-between items-center mb-4">
        <Skeleton className="h-5 w-[120px]" />
        <Skeleton className="h-5 w-[80px]" />
      </div>
      <Skeleton className="h-[300px] w-full" />
    </Card>
  )
}

export const OrderBookSkeletons = () => {
  return (
    <Card className="p-4">
      <Skeleton className="h-5 w-[100px] mb-4" />
      <div className="space-y-2">
        {Array.from({ length: 5 }).map((_, i) => (
          <div key={`ask-${i}`} className="flex justify-between">
            <Skeleton className="h-4 w-[60px]" />
            <Skeleton className="h-4 w-[80px]" />
            <Skeleton className="h-4 w-[70px]" />
          </div>
        ))}
        <Skeleton className="h-6 w-full my-4" />
        {Array.from({ length: 5 }).map((_, i) => (
          <div key={`bid-${i}`} className="flex justify-between">
            <Skeleton className="h-4 w-[60px]" />
            <Skeleton className="h-4 w-[80px]" />
            <Skeleton className="h-4 w-[70px]" />
          </div>
        ))}
      </div>
    </Card>
  )
}

export const NotificationSkeletons = () => {
  return (
    <div className="space-y-4">
      {Array.from({ length: 3 }).map((_, i) => (
        <Card key={i} className="p-4">
          <div className="flex justify-between mb-2">
            <Skeleton className="h-4 w-[140px]" />
            <Skeleton className="h-4 w-[60px]" />
          </div>
          <Skeleton className="h-4 w-[200px] mb-2" />
          <Skeleton className="h-3 w-[100px]" />
        </Card>
      ))}
    </div>
  )
}

export const SettingsSkeletons = () => {
  return (
    <Card className="h-full animate-in fade-in duration-300">
      <CardHeader>
        <Skeleton className="h-6 w-[180px] mb-2" />
        <Skeleton className="h-4 w-[240px]" />
      </CardHeader>
      <CardContent className="space-y-6">
        {Array.from({ length: 4 }).map((_, i) => (
          <div key={i} className="space-y-2">
            <Skeleton className="h-5 w-[140px]" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-4 w-[200px]" />
          </div>
        ))}
      </CardContent>
    </Card>
  )
}

================
File: src/components/ui/loading-state.tsx
================
import React from 'react';
import { Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';

export const TableRowLoading = () => {
    return (
        <div className="flex items-center space-x-4 p-4">
            <div className="w-4/12">
                <div className="h-4 w-full animate-pulse rounded bg-muted"></div>
            </div>
            <div className="w-3/12">
                <div className="h-4 w-full animate-pulse rounded bg-muted"></div>
            </div>
            <div className="w-3/12">
                <div className="h-4 w-full animate-pulse rounded bg-muted"></div>
            </div>
            <div className="w-2/12">
                <div className="h-4 w-full animate-pulse rounded bg-muted"></div>
            </div>
        </div>
    );
};

export const CardLoading = ({ rows = 3 }: { rows?: number }) => {
    return (
        <div className="space-y-4 p-4">
            {Array.from({ length: rows }).map((_, i) => (
                <div key={i} className="flex justify-between items-center">
                    <div className="space-y-2">
                        <div className="h-4 w-[200px] animate-pulse rounded bg-muted"></div>
                        <div className="h-3 w-[150px] animate-pulse rounded bg-muted"></div>
                    </div>
                    <div className="space-y-2">
                        <div className="h-4 w-[100px] animate-pulse rounded bg-muted"></div>
                        <div className="h-3 w-[80px] animate-pulse rounded bg-muted"></div>
                    </div>
                </div>
            ))}
        </div>
    );
};

export const ButtonLoading = ({
    className,
    size = "default"
}: {
    className?: string;
    size?: "sm" | "default" | "lg";
}) => {
    const sizes = {
        sm: "h-4 w-4",
        default: "h-5 w-5",
        lg: "h-6 w-6"
    };

    return (
        <Loader2 className={cn("animate-spin", sizes[size], className)} />
    );
};

export const ChartLoading = () => {
    return (
        <div className="flex h-[400px] items-center justify-center rounded-lg border border-border bg-card">
            <div className="text-center">
                <ButtonLoading size="lg" className="mb-2" />
                <p className="text-sm text-muted-foreground">Loading chart data...</p>
            </div>
        </div>
    );
};

export const ListLoading = ({ items = 5 }: { items?: number }) => {
    return (
        <div className="space-y-2">
            {Array.from({ length: items }).map((_, i) => (
                <div
                    key={i}
                    className="flex items-center justify-between p-4 rounded-lg border border-border"
                >
                    <div className="space-y-2">
                        <div className="h-4 w-[150px] animate-pulse rounded bg-muted"></div>
                        <div className="h-3 w-[100px] animate-pulse rounded bg-muted"></div>
                    </div>
                    <div className="h-8 w-8 animate-pulse rounded-full bg-muted"></div>
                </div>
            ))}
        </div>
    );
};

export default {
    TableRowLoading,
    CardLoading,
    ButtonLoading,
    ChartLoading,
    ListLoading
};

================
File: src/components/ui/loading.tsx
================
// src/components/ui/loading.tsx
"use client"

import { cn } from "@/lib/utils"
import { Skeleton as UISkeleton } from "@/components/ui/skeleton"
import { Loader2 } from "lucide-react"

export const Skeleton = UISkeleton

export const LoadingSpinner = ({
    size = "default",
    className,
}: {
    size?: "sm" | "default" | "lg"
    className?: string
}) => {
    const sizeClasses = {
        sm: "h-4 w-4",
        default: "h-6 w-6",
        lg: "h-8 w-8",
    }

    return (
        <div className={cn("flex items-center justify-center", className)}>
            <Loader2 className={cn("animate-spin text-primary", sizeClasses[size])} />
        </div>
    )
}

export const LoadingDots = ({ className }: { className?: string }) => {
    return (
        <div className={cn("flex space-x-1", className)}>
            {Array.from({ length: 3 }).map((_, i) => (
                <div
                    key={i}
                    className="h-2 w-2 bg-current rounded-full animate-pulse"
                    style={{
                        animationDelay: `${i * 150}ms`,
                    }}
                />
            ))}
        </div>
    )
}

export const LoadingOverlay = ({
    children,
    loading,
    blur = false,
}: {
    children: React.ReactNode
    loading: boolean
    blur?: boolean
}) => {
    if (!loading) return <>{children}</>

    return (
        <div className="relative">
            {blur ? (
                <div className="blur-sm pointer-events-none">{children}</div>
            ) : (
                children
            )}
            <div className="absolute inset-0 bg-background/50 flex items-center justify-center">
                <LoadingSpinner size="lg" />
            </div>
        </div>
    )
}

================
File: src/components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: src/components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: src/components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: src/components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: src/components/ui/sidebar.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: src/components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: src/components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.tsx
================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: src/components/ui/toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: src/components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/components/ui/transitions.tsx
================
import { motion } from 'framer-motion';
export const SlideIn = ({
    children,
    direction = 'right'
}: {
    children: React.ReactNode;
    direction?: 'right' | 'left';
}) => (
    <motion.div
        initial={{ opacity: 0, x: direction === 'right' ? 50 : -50 }}
        animate={{ opacity: 1, x: 0 }}
        exit={{ opacity: 0, x: direction === 'right' ? 50 : -50 }}
        transition={{ duration: 0.2 }}
    >
        {children}
    </motion.div>
);

================
File: src/components/wallet/tracker.tsx
================
import { WalletBalanceSkeletons } from "@/components/ui/loading-skeleton"
import { useWalletTrackerStore } from '@/stores/wallet-tracker-store';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Token } from '@/types/crypto';

interface WalletUpdate {
    balance: number
    equity: number
    tokens: Token[]
}

const WalletTracker = () => {
    const { isLoading, serverWallet } = useWalletTrackerStore();

    if (isLoading) {
        return <WalletBalanceSkeletons />
    }

    return (
        <Card>
            <CardHeader>
                <CardTitle className="flex items-center gap-2">
                    Wallet Balance
                </CardTitle>
            </CardHeader>
            <CardContent>
                <div className="space-y-2">
                    <div className="flex items-center justify-between">
                        <span className="text-sm text-muted-foreground">Balance</span>
                        <span>{serverWallet?.balance || '0.00'} USDT</span>
                    </div>
                    <div className="flex items-center justify-between">
                        <span className="text-sm text-muted-foreground">Equity</span>
                        <span>{serverWallet?.balance || '0.00'} USDT</span>
                    </div>
                </div>
            </CardContent>
        </Card>
    );
};

================
File: src/components/wallet-lookup/wallet-lookup-form.tsx
================
"use client"

import { useState } from 'react'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { toast } from 'sonner'
import { API_BASE_URL } from '@/config/constants'
import { WalletLookupResult } from '@/types'
import { useWalletTrackerStore } from '@/stores/wallet-tracker-store'

interface WalletLookupFormProps {
  onLookupResult: (result: WalletLookupResult) => void
}

export function WalletLookupForm({ onLookupResult }: WalletLookupFormProps) {
  const [walletAddress, setWalletAddress] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const { recentWallets, addRecentWallet } = useWalletTrackerStore()

  const handleLookup = async (address: string = walletAddress) => {
    if (!address.trim()) {
      toast.error('Please enter a wallet address')
      return
    }

    setIsLoading(true)
    try {
      const response = await fetch(`${API_BASE_URL}/wallet/${address}`)

      if (!response.ok) {
        throw new Error('Failed to fetch wallet details')
      }

      const data = await response.json()
      const result = {
        address: address,
        balance: data.sol_balance,
        tokens: data.tokens
      }

      const lookupResult = {
        address: address,
        balance: data.sol_balance,
        solBalance: data.sol_balance,
        tokens: data.tokens
      }

      onLookupResult(lookupResult)
      addRecentWallet(lookupResult)

      toast.success('Wallet details retrieved successfully')
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'An unknown error occurred')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Wallet Lookup</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex space-x-2">
          <Input
            placeholder="Enter Solana wallet address"
            value={walletAddress}
            onChange={(e) => setWalletAddress(e.target.value)}
          />
          <Button
            onClick={() => handleLookup()}
            disabled={isLoading}
          >
            {isLoading ? 'Looking up...' : 'Lookup'}
          </Button>
        </div>
        {recentWallets && recentWallets.length > 0 && (
          <div className="flex items-center space-x-2">
            <span className="text-sm text-muted-foreground">Recent:</span>
            <Select onValueChange={(address) => handleLookup(address)}>
              <SelectTrigger className="w-[200px]">
                <SelectValue placeholder="Select wallet" />
              </SelectTrigger>
              <SelectContent>
                {recentWallets.map((wallet) => (
                  <SelectItem key={wallet.address} value={wallet.address}>
                    {`${wallet.address.slice(0, 4)}...${wallet.address.slice(-4)}`}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        )}
      </CardContent>
    </Card>
  )
}

================
File: src/components/wallet-lookup/wallet-lookup-results.tsx
================
"use client"

import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { TokenRow } from '@/components/dashboard/token-row'
import { TradePanel } from '@/components/dashboard/trade-panel'
import { TrackedWallet, WalletUpdate, TokenInfo } from '@/types'
import { useWalletTrackerStore } from '@/stores/wallet-tracker-store'
import { API_BASE_URL } from '@/config/constants'
import { toast } from 'sonner'

interface WalletLookupResultsProps {
  walletDetails: WalletUpdate
}

export function WalletLookupResults({ walletDetails }: WalletLookupResultsProps) {
  const [isTracking, setIsTracking] = useState(false)
  const [selectedToken, setSelectedToken] = useState<TokenInfo | null>(null)
  const [isTradeDialogOpen, setIsTradeDialogOpen] = useState(false)
  const { addTrackedWallet } = useWalletTrackerStore()

  const handleTrackWallet = async () => {
    setIsTracking(true)
    try {
      const response = await fetch(`${API_BASE_URL}/tracked_wallets`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          wallet_address: walletDetails.address,
          is_active: true
        })
      })

      if (!response.ok) {
        throw new Error('Failed to track wallet')
      }

      const result = await response.json()
      const newWallet: TrackedWallet = {
        id: result.tracked_wallet_id,
        wallet_address: walletDetails.address,
        is_active: true,
        user_id: undefined,
        created_at: undefined,
        updated_at: undefined
      }

      addTrackedWallet(newWallet)
      toast.success('Wallet added to tracked wallets')
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'An error occurred')
    } finally {
      setIsTracking(false)
    }
  }

  const handleTokenTrade = (token: TokenInfo) => {
    setSelectedToken(token)
    setIsTradeDialogOpen(true)
  }

  return (
    <>
      <Card>
        <CardHeader className="flex flex-row justify-between items-center">
          <CardTitle>Wallet Details</CardTitle>
          <Button 
            onClick={handleTrackWallet} 
            disabled={isTracking}
          >
            {isTracking ? 'Adding...' : 'Track Wallet'}
          </Button>
        </CardHeader>
        <CardContent>
          <div className="mb-4">
            <span className="font-medium">SOL Balance:</span> {walletDetails.balance !== undefined ? walletDetails.balance.toFixed(4) : '0.0000'} SOL
          </div>
          {walletDetails.tokens && walletDetails.tokens.length > 0 ? (
            walletDetails.tokens.map((token, index) => (
              <TokenRow 
                key={`${token.mint}-${index}`}
                token={{
                  address: token.mint,
                  symbol: token.symbol,
                  name: token.name,
                  balance: token.raw_balance,
                  market_cap: token.market_cap,
                  decimals: token.decimals
                }} 
                onClickTrade={() => handleTokenTrade({
                  address: token.mint,
                  symbol: token.symbol,
                  name: token.name,
                  balance: token.raw_balance,
                  market_cap: token.market_cap,
                  decimals: token.decimals
                })}
              />
            ))
          ) : (
            <div className="text-center text-muted-foreground">
              No tokens found in this wallet
            </div>
          )}
        </CardContent>
      </Card>

      <Dialog open={isTradeDialogOpen} onOpenChange={setIsTradeDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Trade Token</DialogTitle>
          </DialogHeader>
          {selectedToken && (
            <TradePanel 
              token={selectedToken} 
              onTrade={async () => {}} 
              isLoading={false}
            />
          )}
        </DialogContent>
      </Dialog>
    </>
  )
}

================
File: src/components/watchlist/create-watchlist-dialog.tsx
================
"use client"

import React, { useState } from 'react'
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger,
  DialogFooter,
  DialogClose,
  DialogDescription
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { useWatchlistStore } from '@/stores/watchlist-store'
import { toast } from 'sonner'
import { Plus } from 'lucide-react'

export function CreateWatchlistDialog() {
  const [name, setName] = useState('')
  const [description, setDescription] = useState('')
  const { createWatchlist } = useWatchlistStore()

  const handleCreateWatchlist = async () => {
    if (!name.trim()) {
      toast.error('Watchlist name is required')
      return
    }

    try {
      await createWatchlist({ 
        name, 
        description: description || undefined 
      })
      
      toast.success('Watchlist created successfully')
      
      // Reset form
      setName('')
      setDescription('')
    } catch (error) {
      toast.error('Failed to create watchlist')
    }
  }

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          <Plus className="h-4 w-4 mr-2" />
          New Watchlist
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Watchlist</DialogTitle>
          <DialogDescription>
            Create a new watchlist to track your favorite tokens
          </DialogDescription>
        </DialogHeader>
        
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="name" className="text-right">
              Name
            </Label>
            <Input 
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="col-span-3"
              placeholder="Enter watchlist name"
              required
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="description" className="text-right">
              Description
            </Label>
            <Input 
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className="col-span-3"
              placeholder="Optional description"
            />
          </div>
        </div>
        
        <DialogFooter>
          <DialogClose asChild>
            <Button variant="outline">Cancel</Button>
          </DialogClose>
          <Button 
            onClick={handleCreateWatchlist}
            disabled={!name.trim()}
          >
            Create Watchlist
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

================
File: src/components/watchlist/watchlist-button.tsx
================
import { useState } from 'react'
import { Button } from '@/components/ui/button'
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet'
import { Star } from 'lucide-react'
import WatchlistManager from './watchlist-manager'

export const WatchlistButton = () => {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <Sheet open={isOpen} onOpenChange={setIsOpen}>
      <SheetTrigger asChild>
        <Button variant="ghost" className="w-full flex items-center justify-start">
          <Star className="h-5 w-5 mr-3" />
          Manage Watchlists
        </Button>
      </SheetTrigger>
      <SheetContent side="right" className="w-[400px]">
        <SheetHeader>
          <SheetTitle>Manage Watchlists</SheetTitle>
        </SheetHeader>
        <div className="mt-4">
          <WatchlistManager />
        </div>
      </SheetContent>
    </Sheet>
  )
}

================
File: src/components/watchlist/watchlist-manager.tsx
================
import { useState, useEffect } from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { ScrollArea } from '@/components/ui/scroll-area'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Card, CardContent } from '@/components/ui/card'
import { Checkbox } from '@/components/ui/checkbox'
import { useWatchlistStore } from '@/stores/watchlist-store'
import { Star, Trash2, Plus } from 'lucide-react'
import { toast } from 'sonner'

const WatchlistManager = () => {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [newWatchlistName, setNewWatchlistName] = useState('')
  const [newWatchlistDescription, setNewWatchlistDescription] = useState('')
  
  const {
    watchlists,
    tokens,
    activeWatchlistId,
    fetchWatchlists,
    setActiveWatchlist,
    createWatchlist,
    deleteWatchlist,
    fetchWatchlistTokens,
    removeToken
  } = useWatchlistStore()

  useEffect(() => {
    fetchWatchlists()
  }, [fetchWatchlists])

  useEffect(() => {
    if (activeWatchlistId) {
      fetchWatchlistTokens()
    }
  }, [activeWatchlistId, fetchWatchlistTokens])

  const handleCreateWatchlist = async () => {
    if (!newWatchlistName.trim()) {
      toast.error('Watchlist name is required')
      return
    }
  
    try {
      const createdWatchlist = await createWatchlist({
        name: newWatchlistName,
        description: newWatchlistDescription || undefined
      })
  
      setIsCreateDialogOpen(false)
      setNewWatchlistName('')
      setNewWatchlistDescription('')
      
      if (createdWatchlist?.id) {
        setActiveWatchlist(createdWatchlist.id)
      }
      
      toast.success('Watchlist created successfully')
    } catch (error) {
      toast.error('Failed to create watchlist')
    }
  }

  const handleDeleteWatchlist = async () => {
    if (!activeWatchlistId) {
      toast.error('No watchlist selected')
      return
    }
    
    try {
      await deleteWatchlist(activeWatchlistId)
      toast.success('Watchlist deleted successfully')
    } catch (error) {
      toast.error('Failed to delete watchlist')
    }
  }

  const handleRemoveToken = async (address: string) => {
    try {
      await removeToken(address)
      toast.success('Token removed from watchlist')
    } catch (error) {
      toast.error('Failed to remove token')
    }
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button variant="outline" size="sm">
              <Plus className="h-4 w-4 mr-2" />
              Create Watchlist
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create New Watchlist</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <Label htmlFor="name">Name</Label>
                <Input
                  id="name"
                  value={newWatchlistName}
                  onChange={(e) => setNewWatchlistName(e.target.value)}
                  placeholder="Enter watchlist name"
                />
              </div>
              <div>
                <Label htmlFor="description">Description (Optional)</Label>
                <Input
                  id="description"
                  value={newWatchlistDescription}
                  onChange={(e) => setNewWatchlistDescription(e.target.value)}
                  placeholder="Enter description"
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleCreateWatchlist}>
                Create
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {activeWatchlistId && (
          <Button
            variant="destructive"
            size="sm"
            onClick={handleDeleteWatchlist}
          >
            <Trash2 className="h-4 w-4 mr-2" />
            Delete Watchlist
          </Button>
        )}
      </div>

      <div className="flex flex-wrap gap-2">
        {watchlists.map((list) => (
          <div 
            key={`watchlist-${list.id}`}
            className="flex items-center space-x-2 p-2 border rounded-md"
          >
            <Checkbox
              id={`watchlist-checkbox-${list.id}`}
              checked={activeWatchlistId === list.id}
              onCheckedChange={(checked) => {
                if (checked) {
                  setActiveWatchlist(list.id)
                }
              }}
            />
            <Label 
              htmlFor={`watchlist-checkbox-${list.id}`}
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              {list.name}
            </Label>
          </div>
        ))}
      </div>

      {activeWatchlistId && tokens.length > 0 && (
        <ScrollArea className="h-[300px]">
          <div className="space-y-2">
            {tokens.map((token) => (
              <Card key={`token-${token.address}`}>
                <CardContent className="flex justify-between items-center p-4">
                  <div>
                    <div className="font-medium">{token.symbol}</div>
                    <div className="text-sm text-muted-foreground">{token.name}</div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleRemoveToken(token.address)}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </ScrollArea>
      )}
    </div>
  )
}

export default WatchlistManager

================
File: src/components/watchlist/watchlist-panel.tsx
================
import { useEffect } from 'react'
import { useWatchlistStore } from '@/stores/watchlist-store'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Trash2 } from 'lucide-react'
import { toast } from 'sonner'

interface WatchlistPanelProps {
  children?: React.ReactNode
}

export function WatchlistPanel({ children }: WatchlistPanelProps) {
  const { 
    tokens, 
    removeToken, 
    fetchWatchlists,
    watchlists,
    activeWatchlistId,
    setActiveWatchlist,
    fetchWatchlistTokens,
    isLoading
  } = useWatchlistStore()

  useEffect(() => {
    console.log('Fetching watchlists')
    fetchWatchlists()
  }, [fetchWatchlists])

  useEffect(() => {
    if (activeWatchlistId) {
      console.log('Fetching tokens for watchlist:', activeWatchlistId)
      console.log('Current tokens before fetch:', tokens)
      fetchWatchlistTokens()
    }
  }, [activeWatchlistId, fetchWatchlistTokens])

  useEffect(() => {
    console.log('Tokens updated:', tokens)
  }, [tokens])

  const handleRemoveToken = async (address: string) => {
    try {
      await removeToken(address)
      toast.success('Token removed from watchlist')
    } catch (error) {
      toast.error('Failed to remove token')
    }
  }

  if (!activeWatchlistId) {
    return (
      <div className="flex items-center justify-center h-[200px]">
        <p className="text-muted-foreground">Select a watchlist to view tokens</p>
      </div>
    )
  }

  console.log('Rendering with tokens:', tokens)

  return (
    <div className="space-y-4">
      {isLoading ? (
        <div className="flex items-center justify-center h-[200px]">
          <p className="text-muted-foreground">Loading tokens...</p>
        </div>
      ) : tokens.length === 0 ? (
        <div className="flex items-center justify-center h-[200px]">
          <p className="text-muted-foreground">No tokens in watchlist</p>
        </div>
      ) : (
        <ScrollArea className="h-[400px]">
          <div className="space-y-2">
            {tokens.map((token) => (
              <Card key={`token-${token.address}`}>
                <CardContent className="flex justify-between items-center p-4">
                  <div>
                    <div className="font-medium">{token.symbol || 'Unknown'}</div>
                    <div className="text-sm text-muted-foreground">
                      {token.name || token.address}
                    </div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleRemoveToken(token.address)}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </ScrollArea>
      )}
      {children}
    </div>
  )
}

================
File: src/components/whatever/Component.tsx
================
import { useWebSocketStore } from '@/stores/websocket-store'

================
File: src/components/candlestick-chart.tsx
================
"use client"

import { useEffect, useRef, useCallback } from "react"
import dynamic from "next/dynamic"
import usePriceFeed from "@/hooks/use-price-feed-websocket"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import type { ApexOptions } from "apexcharts"
import { usePriceStore } from "@/stores/price-store"

const Chart = dynamic(() => import("react-apexcharts"), { ssr: false })

interface CandlestickChartProps {
  tokenAddress: string
}

const CandlestickChart = ({ tokenAddress }: CandlestickChartProps) => {
  const { currentPrice, isConnected, candlesticks, setCurrentPrice, setCandlesticks, setIsConnected } = usePriceStore()

  const priceFeedData = usePriceFeed({
    baseUrl: process.env.NEXT_PUBLIC_PRICE_FEED_URL || "",
    tokenAddress,
  })

  const prevPriceDataRef = useRef(priceFeedData.priceData)
  const prevIsConnectedRef = useRef(priceFeedData.isConnected)
  const prevCandlesticksRef = useRef(priceFeedData.candlesticks)

  const updateStoreData = useCallback(() => {
    if (priceFeedData.priceData !== prevPriceDataRef.current) {
      if (priceFeedData.priceData !== null) {
        setCurrentPrice(priceFeedData.priceData)
      }
      prevPriceDataRef.current = priceFeedData.priceData
    }

    if (priceFeedData.isConnected !== prevIsConnectedRef.current) {
      setIsConnected(priceFeedData.isConnected)
      prevIsConnectedRef.current = priceFeedData.isConnected
    }

    if (priceFeedData.candlesticks !== prevCandlesticksRef.current) {
      setCandlesticks(priceFeedData.candlesticks)
      prevCandlesticksRef.current = priceFeedData.candlesticks
    }
  }, [priceFeedData, setCurrentPrice, setIsConnected, setCandlesticks])

  useEffect(() => {
    updateStoreData()
  }, [updateStoreData])

  const options: ApexOptions = {
    // Your chart options here
  }

  const series = [
    {
      data: candlesticks,
    },
  ]

  return (
    <Card>
      <CardHeader>
        <CardTitle>Price Chart</CardTitle>
      </CardHeader>
      <CardContent>
        {isConnected ? (
          <Chart options={options} series={series} type="candlestick" height={350} />
        ) : (
          <p>Connecting to price feed...</p>
        )}
      </CardContent>
    </Card>
  )
}

export default CandlestickChart

================
File: src/components/theme-provider.tsx
================
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

================
File: src/components/theme-toggle.tsx
================
"use client"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"
import { useEffect, useState } from "react"

interface ThemeToggleProps {
  isCollapsed?: boolean
}

export function ThemeToggle({ isCollapsed }: ThemeToggleProps) {
  const { setTheme, theme } = useTheme()
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return (
      <Button
        variant="ghost"
        size={isCollapsed ? "icon" : "default"}
        className={cn(
          "w-full",
          isCollapsed ? "px-2" : "justify-start"
        )}
      >
        <Moon className="h-5 w-5" />
        {!isCollapsed && <span className="ml-3">Theme</span>}
      </Button>
    )
  }

  return (
    <Button
      variant="ghost"
      size={isCollapsed ? "icon" : "default"}
      className={cn(
        "w-full",
        isCollapsed ? "px-2" : "justify-start"
      )}
      onClick={() => setTheme(theme === "light" ? "dark" : "light")}
    >
      {theme === "light" ? (
        <>
          <Moon className="h-5 w-5" />
          {!isCollapsed && <span className="ml-3">Dark Mode</span>}
        </>
      ) : (
        <>
          <Sun className="h-5 w-5" />
          {!isCollapsed && <span className="ml-3">Light Mode</span>}
        </>
      )}
    </Button>
  )
}

================
File: src/components/token-info-panel.tsx
================
"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { useWatchlistStore } from "@/stores/watchlist-store"
import { usePriceStore } from "@/stores/price-store"
import { formatBalance } from "@/lib/utils"
import usePriceFeed from "@/hooks/use-price-feed-websocket"
interface TokenInfoPanelProps {
  tokenAddress: string | undefined
}

export const TokenInfoPanel = ({ tokenAddress }: TokenInfoPanelProps) => {
  const { tokens } = useWatchlistStore()
  const { currentPrice } = usePriceStore()
  const priceFeedData = usePriceFeed({
    baseUrl: process.env.NEXT_PUBLIC_PRICE_FEED_URL || "",
    tokenAddress,
  })
  
  if (!tokenAddress) {
    return <Card className="p-4">Invalid token address</Card>
  }

  const token = tokens.find((t) => t.address === tokenAddress)

  if (!token) {
    return <Card className="p-4">Token not found</Card>
  }

  // Helper function to safely format the price
  const formatPrice = (price: unknown): string => {
    if (typeof price === "number") {
      return price.toFixed(6)
    }
    if (typeof price === "object" && price !== null && "price" in price) {
      const numericPrice = Number((price as { price: unknown }).price)
      return isNaN(numericPrice) ? "N/A" : numericPrice.toFixed(6)
    }
    return "N/A"
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Token Info</CardTitle>
      </CardHeader>
      <CardContent className="space-y-2">
        <p>
          <strong>Name:</strong> {token.name}
        </p>
        <p>
          <strong>Symbol:</strong> {token.symbol}
        </p>
        <p>
          <strong>Balance:</strong> {formatBalance(Number.parseFloat(token.balance || "0"))}
        </p>
        <p>
          <strong>Market Cap:</strong> ${token.market_cap?.toLocaleString() ?? "N/A"}
        </p>
        <p>
          <strong>Current Price:</strong> ${formatPrice(currentPrice)}
        </p>
      </CardContent>
    </Card>
  )
}

================
File: src/config/constants.ts
================
export const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api';
export const WALLET_TRACKER_WEBSOCKET_URL = process.env.NEXT_PUBLIC_WEBSOCKET_URL || 'ws://localhost:3000/ws';

export const HTTP_STATUS_CODES = {
  OK: 200,
  CREATED: 201,
  ACCEPTED: 202,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  METHOD_NOT_ALLOWED: 405,
  INTERNAL_SERVER_ERROR: 500,
  NOT_IMPLEMENTED: 501,
  BAD_GATEWAY: 502,
  SERVICE_UNAVAILABLE: 503,
};

================
File: src/hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: src/hooks/use-price-feed-websocket.ts
================
"\"use client"

import { useCallback, useRef, useState, useEffect } from "react"
import { toast } from "react-toastify"

interface PriceData {
  price_sol: number
  timestamp: number
}

interface CandlestickData {
  x: Date
  y: [number, number, number, number] // open, high, low, close
}

interface UsePriceFeedProps {
  baseUrl: string
  tokenAddress: string | undefined
}

const usePriceFeed = ({ baseUrl, tokenAddress }: UsePriceFeedProps) => {
  const [isConnected, setIsConnected] = useState(false)
  const [priceData, setPriceData] = useState<PriceData | null>(null)
  const [candlesticks, setCandlesticks] = useState<CandlestickData[]>([])
  const websocketRef = useRef<WebSocket | null>(null)

  const connect = useCallback(() => {
    if (!tokenAddress) return
    if (websocketRef.current?.readyState === WebSocket.OPEN) return

    try {
      let wsUrl: string
      if (baseUrl.startsWith("ws://") || baseUrl.startsWith("wss://")) {
        wsUrl = `${baseUrl}/ws?token=${tokenAddress}`
      } else {
        const url = new URL("/ws", baseUrl)
        url.searchParams.set("token", tokenAddress)
        wsUrl = url.toString().replace(/^http/, "ws")
      }

      console.log("Connecting to WebSocket:", wsUrl)
      websocketRef.current = new WebSocket(wsUrl)

      websocketRef.current.onopen = () => {
        console.log("WebSocket connection opened")
        setIsConnected(true)
      }

      websocketRef.current.onmessage = (event) => {
        const data = JSON.parse(event.data)
        setPriceData(data)
        updateCandlesticks(data)
      }

      websocketRef.current.onclose = () => {
        setIsConnected(false)
        handleReconnect()
      }

      websocketRef.current.onerror = (error) => {
        console.error("WebSocket error:", error)
        toast.error("WebSocket error occurred")
        handleReconnect()
      }
    } catch (error) {
      console.error("Error creating WebSocket:", error)
      toast.error("Failed to create WebSocket connection")
      handleReconnect()
    }
  }, [baseUrl, tokenAddress])

  const handleReconnect = useCallback(() => {
    setTimeout(() => {
      connect()
    }, 5000) // Retry after 5 seconds
  }, [connect])

  const updateCandlesticks = useCallback((data: PriceData) => {
    setCandlesticks((prevCandlesticks) => {
      // Implement your candlestick update logic here
      // This is a simplified example
      const newCandle: CandlestickData = {
        x: new Date(data.timestamp * 1000),
        y: [data.price_sol, data.price_sol, data.price_sol, data.price_sol],
      }
      return [...prevCandlesticks, newCandle].slice(-100) // Keep last 100 candlesticks
    })
  }, [])

  useEffect(() => {
    connect()
    return () => {
      if (websocketRef.current) {
        websocketRef.current.close()
      }
    }
  }, [connect])

  return { isConnected, priceData, candlesticks }
}

export default usePriceFeed

================
File: src/hooks/use-toast.ts
================
"use client";

// Inspired by react-hot-toast library
import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };

================
File: src/hooks/use-websocket.ts
================
import { useWalletTrackerStore } from "@/stores/wallet-tracker-store";
import { useState, useEffect, useCallback, useRef } from "react";
import { toast } from "sonner";
import { CommandMessage } from "@/types/websocket";

const RECONNECT_DELAY = 5000;

interface WebSocketMessage {
  type: string;
  data?: any;
}

export const useWebSocket = (url: string) => {
  const ws = useRef<WebSocket | null>(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 5;

  const { addNotification, setServerWallet, setConnectionStatus } =
    useWalletTrackerStore();

  const connect = useCallback(() => {
    try {
      ws.current = new WebSocket(url);

      ws.current.onopen = () => {
        reconnectAttempts.current = 0;
        toast.success("WebSocket connection established");
      };

      ws.current.onclose = (event) => {
        if (!event.wasClean && reconnectAttempts.current < maxReconnectAttempts) {
          reconnectAttempts.current += 1;
          setTimeout(connect, 3000);
          toast.error(`Reconnecting... (${reconnectAttempts.current}/${maxReconnectAttempts})`);
        }
      };

      ws.current.onerror = (error) => {
        console.error("WebSocket error:", error);
        toast.error("WebSocket connection error");
      };

      ws.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          switch (data.type) {
            case "wallet_update":
              setServerWallet(data.data);
              break;
            case "copy_trade_execution":
            case "tracked_wallet_trade":
            case "transaction_logged":
              addNotification({
                id: crypto.randomUUID(),
                type: "info",
                title: data.type.replace(/_/g, " ").toUpperCase(),
                message: `${data.data.transaction_type}: ${data.data.amount_token} ${data.data.token_symbol}`,
                timestamp: new Date(),
              });
              break;
            case "error":
              toast.error(data.data.message);
              break;
          }
        } catch (error) {
          console.error("Error processing message:", error);
        }
      };
    } catch (error) {
      console.error("WebSocket connection failed:", error);
      toast.error("Failed to connect to WebSocket");
    }
  }, [url, setServerWallet, addNotification]);

  const sendMessage = useCallback((message: WebSocketMessage) => {
    if (ws.current?.readyState === WebSocket.OPEN) {
      ws.current.send(JSON.stringify(message));
      return true;
    }
    toast.warning("Message not sent - connection not ready");
    return false;
  }, []);

  useEffect(() => {
    connect();
    return () => {
      ws.current?.close();
    };
  }, [connect]);

  return {
    sendMessage,
    isConnected: ws.current?.readyState === WebSocket.OPEN
  };
};

export default useWebSocket;

================
File: src/hooks/usePredictivePrefetch.ts
================
import { useEffect } from 'react'
import { useRouter } from 'next/router'

export const usePredictivePrefetch = () => {
    const router = useRouter()

    useEffect(() => {
        const handleMouseOver = (event: MouseEvent) => {
            const target = event.target as HTMLElement
            const link = target.closest('a')

            if (link) {
                const href = link.getAttribute('href')
                if (href && router.route !== href) {
                    router.prefetch(href)
                }
            }
        }

        document.addEventListener('mouseover', handleMouseOver)
        return () => document.removeEventListener('mouseover', handleMouseOver)
    }, [router])
}

================
File: src/hooks/useSmartRefresh.ts
================
import useSWR from 'swr'
import { useEffect } from 'react'
import { useWebSocketStore } from '@/stores/websocket-store'

export const useSmartRefresh = <T = any>(key: string, fetcher: () => Promise<T>) => {
    const { data, error, mutate } = useSWR<T>(key, fetcher, {
        refreshInterval: 30000,
        revalidateOnFocus: false
    })

    useEffect(() => {
        return useWebSocketStore.subscribe(
            (state) => state.lastActivity,
            () => mutate()
        )
    }, [mutate])

    return {
        data,
        isLoading: !error && !data,
        isError: !!error,
        mutate
    }
}

================
File: src/lib/utils.ts
================
import { Keypair } from "@solana/web3.js";
import bs58 from "bs58";
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatBalance(value: string | number, decimals = 6): string {
  const num = typeof value === "string" ? parseFloat(value) : value;
  if (isNaN(num)) return "0";

  // Handle small numbers
  if (Math.abs(num) < 0.000001) {
    return num.toExponential(2);
  }

  return num.toLocaleString(undefined, {
    minimumFractionDigits: 0,
    maximumFractionDigits: decimals,
  });
}

export function formatUSD(value: number): string {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(value);
}

export async function getKeyPairFromPrivateKey(key: string) {
  return Keypair.fromSecretKey(new Uint8Array(bs58.decode(key)));
}

export function shortenAddress(address: string, chars = 4): string {
  if (!address) return "";
  return `${address.slice(0, chars)}...${address.slice(-chars)}`;
}

export function getSolanaExplorerUrl(address: string) {
  return `https://explorer.solana.com/address/${address}`;
}

export function getSolanaExplorerTxUrl(txId: string) {
  return `https://explorer.solana.com/tx/${txId}`;
}

//copy to clipboard
export function copyToClipboard(text: string) {
  navigator.clipboard.writeText(text);
}

================
File: src/services/trade-service.ts
================
import { API_BASE_URL } from '@/config/constants'

export const fetchTrades = async (page: number = 1): Promise<TradeItem[]> => {
  const response = await fetch(`${API_BASE_URL}/trades?page=${page}`)
  if (!response.ok) throw new Error('Failed to fetch trades')
  return response.json()
}

================
File: src/stores/loading-store.ts
================
import { create } from 'zustand'

interface LoadingState {
    loadingStates: Record<string, boolean>
    setLoading: (key: string, isLoading: boolean) => void
    isLoading: (key: string) => boolean
}

export const useLoadingStore = create<LoadingState>((set, get) => ({
    loadingStates: {},

    setLoading: (key: string, isLoading: boolean) =>
        set(state => ({
            loadingStates: {
                ...state.loadingStates,
                [key]: isLoading
            }
        })),

    isLoading: (key: string) => get().loadingStates[key] || false
}))

================
File: src/stores/market-data-store.ts
================


================
File: src/stores/price-store.ts
================
import { create } from "zustand"

interface PriceData {
  price_sol: number
  timestamp: number
}

interface CandlestickData {
  x: Date
  y: [number, number, number, number] // open, high, low, close
}

interface PriceStore {
  currentPrice: PriceData | null
  isConnected: boolean
  candlesticks: CandlestickData[]
  setCurrentPrice: (price: PriceData | null) => void
  setIsConnected: (isConnected: boolean) => void
  setCandlesticks: (candlesticks: CandlestickData[]) => void
}

export const usePriceStore = create<PriceStore>((set) => ({
  currentPrice: null,
  isConnected: false,
  candlesticks: [],
  setCurrentPrice: (price) => set({ currentPrice: price }),
  setIsConnected: (isConnected) => set({ isConnected }),
  setCandlesticks: (candlesticks) => set({ candlesticks }),
}))

================
File: src/stores/setting-store.ts
================
import { create } from 'zustand'
import { persist, createJSONStorage } from 'zustand/middleware'
import { DexType } from '@/types/crypto'

interface ExchangeSettings {
  defaultDex: DexType
  autoSlippage: boolean
  slippageTolerance: number
}

interface SettingsState {
  exchange: ExchangeSettings
  setExchangeSettings: (settings: Partial<ExchangeSettings>) => void
  resetExchangeSettings: () => void
}

const DEFAULT_EXCHANGE_SETTINGS: ExchangeSettings = {
  defaultDex: 'raydium',
  autoSlippage: true,
  slippageTolerance: 1.0,
}

export const useSettingsStore = create<SettingsState>()(
  persist(
    (set) => ({
      exchange: DEFAULT_EXCHANGE_SETTINGS,

      setExchangeSettings: (settings) =>
        set((state) => ({
          exchange: {
            ...state.exchange,
            ...settings,
          },
        })),

      resetExchangeSettings: () =>
        set(() => ({
          exchange: DEFAULT_EXCHANGE_SETTINGS,
        })),
    }),
    {
      name: 'settings-storage',
      storage: createJSONStorage(() => localStorage),
    }
  )
)

================
File: src/stores/settings-store.ts
================
import { create } from 'zustand'

interface CopyTradeSettings {
    maxSlippage: number
    minTradeSize: number
    maxTradeSize: number
    enableNotifications: boolean
    autoTrade: boolean
}

interface SettingsState {
    copyTradeSettings: CopyTradeSettings | null
    isLoading: boolean
    error: string | null
    updateSettings: (settings: Partial<CopyTradeSettings>) => void
    fetchSettings: () => Promise<void>
}

export const useSettingsStore = create<SettingsState>((set) => ({
    copyTradeSettings: null,
    isLoading: false,
    error: null,

    updateSettings: (settings) => {
        set((state) => ({
            copyTradeSettings: {
                ...state.copyTradeSettings,
                ...settings,
            } as CopyTradeSettings,
        }))
    },

    fetchSettings: async () => {
        set({ isLoading: true })
        try {
            // Simulate API call
            await new Promise((resolve) => setTimeout(resolve, 1000))
            set({
                copyTradeSettings: {
                    maxSlippage: 1,
                    minTradeSize: 0.1,
                    maxTradeSize: 10,
                    enableNotifications: true,
                    autoTrade: false,
                },
                isLoading: false,
            })
        } catch (error) {
            set({ error: 'Failed to load settings', isLoading: false })
        }
    },
}))

================
File: src/stores/trade-store.ts
================
// src/stores/trade-store.ts
import { create } from 'zustand'
import { TokenInfo } from '@/types'
import { DexType } from '@/types/crypto'
import { toast } from 'sonner'
import { API_BASE_URL } from '@/config/constants'

interface TradeState {
    selectedToken: TokenInfo | null
    isLoading: boolean
    isExecutingTrade: boolean
    selectedDex: DexType
    slippage: number
    customSlippage: boolean

    setSelectedToken: (token: TokenInfo | null) => void
    setSelectedDex: (dex: DexType) => void
    setSlippage: (slippage: number) => void
    setCustomSlippage: (custom: boolean) => void
    setIsExecutingTrade: (executing: boolean) => void

    executeBuy: (amount: number) => Promise<void>
    executeSell: (amount: number) => Promise<void>
    reset: () => void
}

const DEFAULT_SLIPPAGE = 1.0

export const useTradeStore = create<TradeState>((set, get) => ({
    selectedToken: null,
    isLoading: false,
    isExecutingTrade: false,
    selectedDex: 'raydium',
    slippage: DEFAULT_SLIPPAGE,
    customSlippage: false,

    setSelectedToken: (token) => set({ selectedToken: token }),
    setSelectedDex: (dex) => set({ selectedDex: dex }),
    setSlippage: (slippage) => set({ slippage }),
    setCustomSlippage: (custom) => set({
        customSlippage: custom,
        slippage: custom ? get().slippage : DEFAULT_SLIPPAGE
    }),
    setIsExecutingTrade: (executing) => set({ isExecutingTrade: executing }),

    executeBuy: async (amount) => {
        const { selectedToken, selectedDex, slippage } = get()

        if (!selectedToken) {
            toast.error('No token selected')
            return
        }

        set({ isExecutingTrade: true })

        try {
            const response = await fetch(`${API_BASE_URL}/${selectedDex}/buy`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    token_address: selectedToken.mint,
                    sol_quantity: amount,
                    slippage_tolerance: slippage
                })
            })

            const data = await response.json()

            if (!response.ok || !data.success) {
                throw new Error(data.error || 'Buy failed')
            }

            toast.success('Buy order executed successfully')
        } catch (error) {
            toast.error(error instanceof Error ? error.message : 'Buy failed')
            throw error
        } finally {
            set({ isExecutingTrade: false })
        }
    },

    executeSell: async (amount) => {
        const { selectedToken, selectedDex, slippage } = get()

        if (!selectedToken) {
            toast.error('No token selected')
            return
        }

        set({ isExecutingTrade: true })

        try {
            const response = await fetch(`${API_BASE_URL}/${selectedDex}/sell`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    token_address: selectedToken.mint,
                    token_quantity: amount,
                    slippage_tolerance: slippage
                })
            })

            const data = await response.json()

            if (!response.ok || !data.success) {
                throw new Error(data.error || 'Sell failed')
            }

            toast.success('Sell order executed successfully')
        } catch (error) {
            toast.error(error instanceof Error ? error.message : 'Sell failed')
            throw error
        } finally {
            set({ isExecutingTrade: false })
        }
    },

    reset: () => set({
        selectedToken: null,
        isLoading: false,
        isExecutingTrade: false,
        selectedDex: 'raydium',
        slippage: DEFAULT_SLIPPAGE,
        customSlippage: false,
    })
}))

================
File: src/stores/wallet-tracker-store.tsx
================
import { create } from "zustand";
import { WalletUpdate, CopyTradeSettings, Notification, TrackedWallet } from "@/types";
import { API_BASE_URL } from "@/config/constants";
import { DexType } from "@/types/crypto";

interface WalletTrackerState {
  // Server Wallet State
  serverWallet: WalletUpdate | null;
  isLoading: boolean;
  error: string | null;

  // Copy Trade Settings
  copyTradeSettings: CopyTradeSettings | null;
  isSettingsEnabled: boolean;

  // Connection Status
  connectionStatus: "connected" | "connecting" | "disconnected";

  // Notifications
  notifications: Notification[];

  // Tracked Wallets
  trackedWallets?: TrackedWallet[];

  // Actions
  setServerWallet: (wallet: WalletUpdate) => void;
  setCopyTradeSettings: (settings: CopyTradeSettings) => void;
  setConnectionStatus: (
    status: "connected" | "connecting" | "disconnected"
  ) => void;
  addNotification: (notification: Notification) => void;
  clearNotifications: () => void;
  addTrackedWallet: (wallet: TrackedWallet) => void;

  fetchWalletInfo: () => Promise<void>;
  fetchCopyTradeSettings: () => Promise<void>;

  // Trading Actions
  executeBuy: (
    tokenAddress: string,
    amount: number,
    slippageTolerance: number,
    dex: DexType
  ) => Promise<void>;
  executeSell: (
    tokenAddress: string,
    amount: number,
    slippageTolerance: number,
    dex: DexType
  ) => Promise<void>;

  recentWallets: WalletUpdate[];
  addRecentWallet: (wallet: WalletUpdate) => void;
  clearRecentWallets: () => void;
}

export const useWalletTrackerStore = create<WalletTrackerState>((set, get) => ({
  serverWallet: null,
  isLoading: false,
  error: null,
  copyTradeSettings: null,
  isSettingsEnabled: false,
  connectionStatus: "disconnected",
  notifications: [],
  trackedWallets: [],
  recentWallets: [],

  setServerWallet: (wallet) => set({ serverWallet: wallet }),

  setConnectionStatus: (status) => set({ connectionStatus: status }),

  setError: (error: string) => set({ error }),

  addNotification: (notification) =>
    set((state) => ({
      notifications: [notification, ...state.notifications].slice(0, 50), // Keep last 50
    })),

  addTrackedWallet: (wallet) => {
    set((state) => ({
      trackedWallets: [...(state.trackedWallets || []), wallet]
    }))
  },

  clearNotifications: () => set({ notifications: [] }),

  fetchWalletInfo: async () => {
    set({ isLoading: true, error: null });
    try {
      const response = await fetch(`${API_BASE_URL}/wallet/info`);
      if (!response.ok) throw new Error("Failed to fetch wallet info");
      const data = await response.json();
      set({ serverWallet: data });
    } catch (error) {
      set({
        error:
          error instanceof Error
            ? error.message
            : "Failed to fetch wallet info",
      });
    } finally {
      set({ isLoading: false });
    }
  },

  fetchCopyTradeSettings: async () => {
    set({ isLoading: true, error: null });
    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/copy_trade_settings`
      );
      if (!response.ok) throw new Error("Failed to fetch copy trade settings");
      const [data] = await response.json();

      set({
        copyTradeSettings: data,
        isSettingsEnabled: data.is_enabled,
        isLoading: false,
      });
    } catch (error) {
      console.error("Fetch settings error:", error);
      set({
        error:
          error instanceof Error ? error.message : "Failed to fetch settings",
        isLoading: false,
      });
    }
  },

  setCopyTradeSettings: (settings) => {
    set({
      copyTradeSettings: settings,
      isSettingsEnabled: settings?.is_enabled ?? false,
    });
  },
  executeBuy: async (
    tokenAddress: string,
    amount: number,
    slippageTolerance: number,
    dex: DexType
  ) => {
    set({ isLoading: true });
    try {
      const response = await fetch(`${API_BASE_URL}/${dex}/buy`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          token_address: tokenAddress,
          sol_quantity: amount,
          slippage_tolerance: slippageTolerance,
        }),
      });

      if (!response.ok) throw new Error("Buy failed");

      const result = await response.json();
      get().addNotification({
        id: crypto.randomUUID(),
        type: "success",
        title: "Buy Executed",
        message: `Bought ${result.token_quantity} tokens for ${amount} SOL`,
        timestamp: new Date(),
      });
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error";
      set({ error: errorMessage });
      get().addNotification({
        id: crypto.randomUUID(),
        type: "error",
        title: "Buy Failed",
        message: error instanceof Error ? error.message : "Unknown error",
        timestamp: new Date(),
      });
    } finally {
      set({ isLoading: false });
    }
  },

  executeSell: async (
    tokenAddress: string,
    amount: number,
    slippageTolerance: number,
    dex: DexType
  ) => {
    set({ isLoading: true });
    try {
      const response = await fetch(`${API_BASE_URL}/${dex}/sell`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          token_address: tokenAddress,
          token_quantity: amount,
          slippage_tolerance: slippageTolerance,
        }),
      });

      if (!response.ok) throw new Error("Sell failed");

      const result = await response.json();
      get().addNotification({
        id: crypto.randomUUID(),
        type: "success",
        title: "Sell Executed",
        message: `Sold ${amount} tokens for ${result.sol_received} SOL`,
        timestamp: new Date(),
      });
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error";
      set({ error: errorMessage });
      get().addNotification({
        id: crypto.randomUUID(),
        type: "error",
        title: "Sell Failed",
        message: error instanceof Error ? error.message : "Unknown error",
        timestamp: new Date(),
      });
    } finally {
      set({ isLoading: false });
    }
  },

  addRecentWallet: (wallet) => set((state) => ({
    recentWallets: [
      wallet,
      ...state.recentWallets.filter(w => w.address !== wallet.address)
    ].slice(0, 5)
  })),

  clearRecentWallets: () => set({ recentWallets: [] }),
}));

================
File: src/stores/watchlist-store.ts
================
import { create } from 'zustand'
import { persist, createJSONStorage } from 'zustand/middleware'
import { API_BASE_URL } from '@/config/constants'
import { toast } from 'sonner'

export interface Watchlist {
  id: string
  name: string
  description?: string
  tokens: string[]
  created_at?: string
  updated_at?: string
}

export interface WatchlistToken {
  id?: string
  address: string
  symbol: string
  name: string
  balance?: string
  market_cap?: number
  price_sol?: number
}

interface WatchlistState {
  watchlists: Watchlist[]
  tokens: WatchlistToken[]
  activeWatchlistId?: string
  isLoading: boolean
  error?: string

  // Watchlist operations
  createWatchlist: (watchlist: Omit<Watchlist, 'id' | 'tokens'>) => Promise<Watchlist>
  fetchWatchlists: () => Promise<void>
  deleteWatchlist: (id: string) => Promise<void>
  setActiveWatchlist: (id: string) => void
  updateWatchlist: (watchlist: Watchlist) => Promise<void>

  // Token operations
  addToken: (token: WatchlistToken) => Promise<void>
  removeToken: (address: string) => Promise<void>
  fetchWatchlistTokens: () => Promise<void>

  // New operations
  addToWatchlist: (token: WatchlistToken) => void
  removeFromWatchlist: (address: string) => void
}

export const useWatchlistStore = create<WatchlistState>()(
  persist(
    (set, get) => ({
      watchlists: [],
      tokens: [],
      activeWatchlistId: undefined,
      isLoading: false,
      error: undefined,

      createWatchlist: async (watchlistData) => {
        try {
          set({ isLoading: true })
          const response = await fetch(`${API_BASE_URL}/watchlists`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(watchlistData)
          })

          if (!response.ok) {
            throw new Error('Failed to create watchlist')
          }

          const newWatchlist: Watchlist = await response.json()

          set((state) => ({
            watchlists: [...state.watchlists, newWatchlist],
            activeWatchlistId: newWatchlist.id
          }))

          return newWatchlist
        } catch (error) {
          console.error('Error creating watchlist:', error)
          throw error
        } finally {
          set({ isLoading: false })
        }
      },

      fetchWatchlists: async () => {
        try {
          set({ isLoading: true })
          const response = await fetch(`${API_BASE_URL}/watchlists`)
          if (!response.ok) throw new Error('Failed to fetch watchlists')

          const watchlists: Watchlist[] = await response.json()
          set({ watchlists })
        } catch (error) {
          console.error('Error fetching watchlists:', error)
          toast.error('Failed to fetch watchlists')
          throw error
        } finally {
          set({ isLoading: false })
        }
      },

      deleteWatchlist: async (id) => {
        try {
          set({ isLoading: true })
          const response = await fetch(`${API_BASE_URL}/watchlists/${id}`, {
            method: 'DELETE'
          })

          if (!response.ok) throw new Error('Failed to delete watchlist')

          set((state) => ({
            watchlists: state.watchlists.filter(w => w.id !== id),
            activeWatchlistId: state.activeWatchlistId === id ? undefined : state.activeWatchlistId
          }))
          toast.success('Watchlist deleted')
        } catch (error) {
          console.error('Error deleting watchlist:', error)
          toast.error('Failed to delete watchlist')
          throw error
        } finally {
          set({ isLoading: false })
        }
      },

      setActiveWatchlist: (id) => {
        set({ activeWatchlistId: id })
        get().fetchWatchlistTokens()
      },

      updateWatchlist: async (watchlist) => {
        try {
          set({ isLoading: true })
          const response = await fetch(`${API_BASE_URL}/watchlists/${watchlist.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(watchlist)
          })

          if (!response.ok) throw new Error('Failed to update watchlist')

          const updatedWatchlist = await response.json()
          set((state) => ({
            watchlists: state.watchlists.map(w =>
              w.id === updatedWatchlist.id ? updatedWatchlist : w
            )
          }))
          toast.success('Watchlist updated')
        } catch (error) {
          console.error('Error updating watchlist:', error)
          toast.error('Failed to update watchlist')
          throw error
        } finally {
          set({ isLoading: false })
        }
      },

      addToken: async (token: WatchlistToken) => {
        const activeWatchlistId = get().activeWatchlistId
        if (!activeWatchlistId) {
          throw new Error('No active watchlist selected')
        }

        try {
          set({ isLoading: true })

          const response = await fetch(`${API_BASE_URL}/watchlists/tokens`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({
              watchlist_id: activeWatchlistId,
              token_address: token.address
            })
          })

          if (!response.ok) {
            throw new Error('Failed to add token')
          }

          set((state) => ({
            tokens: [...state.tokens, token]
          }))
        } catch (error) {
          console.error('Error adding token:', error)
          throw error
        } finally {
          set({ isLoading: false })
        }
      },

      removeToken: async (address: string) => {
        const { activeWatchlistId } = get()
        if (!activeWatchlistId) return

        try {
          set({ isLoading: true })
          const response = await fetch(`${API_BASE_URL}/watchlists/${activeWatchlistId}/tokens/${address}`, {
            method: 'DELETE'
          })

          if (!response.ok) {
            const text = await response.text()
            throw new Error(text || 'Failed to remove token')
          }

          set((state) => ({
            tokens: state.tokens.filter(t => t.address !== address)
          }))
        } catch (error) {
          console.error('Error removing token:', error)
          throw error
        } finally {
          set({ isLoading: false })
        }
      },

      fetchWatchlistTokens: async () => {
        const { activeWatchlistId } = get()
        if (!activeWatchlistId) return

        try {
          set({ isLoading: true })
          const response = await fetch(`${API_BASE_URL}/watchlists/${activeWatchlistId}`)
          if (!response.ok) throw new Error('Failed to fetch tokens')

          const watchlistData = await response.json()
          console.log('Raw Watchlist Data:', watchlistData)

          // Fetch metadata for each token
          const tokenPromises = watchlistData.tokens.map(async (tokenAddress: string) => {
            try {
              const metadataResponse = await fetch(`${API_BASE_URL}/token_metadata/${tokenAddress}`)
              if (!metadataResponse.ok) throw new Error('Failed to fetch token metadata')

              const metadata = await metadataResponse.json()
              return {
                address: tokenAddress,
                symbol: metadata.symbol || '',
                name: metadata.name || '',
                balance: '0',
                market_cap: metadata.market_cap,
                price_sol: metadata.price_sol,
              }
            } catch (error) {
              console.error(`Error fetching metadata for token ${tokenAddress}:`, error)
              return {
                address: tokenAddress,
                symbol: 'Unknown',
                name: 'Unknown Token',
                balance: '0',
                market_cap: 0,
                price_sol: 0,
              }
            }
          })

          const tokens = await Promise.all(tokenPromises)
          console.log('Tokens with metadata:', tokens)

          set({ tokens })
        } catch (error) {
          console.error('Error fetching tokens:', error)
          toast.error('Failed to fetch tokens')
          throw error
        } finally {
          set({ isLoading: false })
        }
      },

      addToWatchlist: (token: WatchlistToken) => set((state) => ({
        tokens: [...state.tokens, token]
      })),

      removeFromWatchlist: (address: string) => set((state) => ({
        tokens: state.tokens.filter(t => t.address !== address)
      }))
    }),
    {
      name: 'watchlist-storage',
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({
        watchlists: state.watchlists,
        activeWatchlistId: state.activeWatchlistId
      })
    }
  )
)

================
File: src/stores/websocket-store.ts
================
import { create } from 'zustand'
import { subscribeWithSelector } from 'zustand/middleware'
import { useWebSocket } from '@/hooks/use-websocket'
import type { WebSocketMessage } from '@/types/websocket'

type WebSocketState = {
  send: (message: WebSocketMessage) => boolean
  connected: boolean
  lastActivity: number
}

export const useWebSocketStore = create(
  subscribeWithSelector<WebSocketState>(() => {
    const { sendMessage, isConnected } = useWebSocket(process.env.NEXT_PUBLIC_WS_URL!)
    return {
      send: sendMessage,
      connected: isConnected,
      lastActivity: Date.now()
    }
  })
)

================
File: src/types/apexcharts.d.ts
================
declare module 'react-apexcharts' {
    interface Props {
        type?: 'candlestick' | 'line' | 'bar' | 'area'
        series?: Array<{ name: string; data: number[] }>
        options?: any
        width?: string | number
        height?: string | number
    }
    const ReactApexChart: React.ComponentType<Props>
    export default ReactApexChart
}

================
File: src/types/crypto.ts
================
import { WalletAdapterNetwork } from "@solana/wallet-adapter-base";

interface TransactionResult {
  blockTime: number;
  slot: number;
}

interface TransactionData {
  jsonrpc: string;
  result: TransactionResult;
  id: number;
}
export interface CoinData {
  mint: string;
  name: string;
  symbol: string;
  description: string;
  image_uri: string;
  metadata_uri: string;
  twitter: string | null;
  telegram: string | null;
  bonding_curve: string;
  associated_bonding_curve: string;
  creator: string;
  created_timestamp: number;
  raydium_pool: string | null;
  complete: boolean;
  virtual_sol_reserves: number;
  virtual_token_reserves: number;
  total_supply: number;
  website: string | null;
  show_name: boolean;
  king_of_the_hill_timestamp: number | null;
  market_cap: number;
  reply_count: number;
  last_reply: number;
  nsfw: boolean;
  market_id: string | null;
  inverted: boolean | null;
  username: string;
  profile_image: string;
  usd_market_cap: number;
}

export interface TokenWebsocketResponse {
  signature: string;
  transaction_data: TransactionData;
  coin_data: CoinData;
}

export interface Token {
  mint: string;
  name: string;
  symbol: string;
  description: string;
  imageUri: string;
  metadataUri: string;
  twitter: string | null;
  telegram: string | null;
  bondingCurve: string;
  associatedBondingCurve: string;
  creator: string;
  createdTimestamp: number;
  raydiumPool: string | null;
  complete: boolean;
  virtualSolReserves: number;
  virtualTokenReserves: number;
  totalSupply: number;
  website: string | null;
  showName: boolean;
  kingOfTheHillTimestamp: number | null;
  marketCap: number;
  replyCount: number;
  lastReply: number;
  nsfw: boolean;
  marketId: string | null;
  inverted: boolean | null;
  username: string;
  profileImage: string;
  usdMarketCap: number;
}

export type Action = { type: "RECEIVE_TOKEN"; payload: Token };

export interface Transaction {
  signature: string;
  slot: number;
  err: unknown;
  memo: string;
  blockTime: number;
  confirmationStatus: string;
}

export interface WalletState {
  wallet: string;
  transactions: Transaction[];
}

export interface WalletStore {
  wallets: WalletState[];
  addWallet: (wallet: string) => void;
  removeWallet: (wallet: string) => void;
  addTransaction: (wallet: string, transaction: Transaction) => void;
  network: WalletAdapterNetwork;
  endpoint: string;
  setNetwork: (network: WalletAdapterNetwork) => void;
  setEndpoint: (endpoint: string) => void;
}

export type DexType = "pump_fun" | "raydium" | "jupiter";

export interface TokenInfo {
  address: string
  mint: string
  symbol: string
  name: string
  balance: string
  raw_balance?: string
  market_cap: number
  decimals: number
}

================
File: src/types/index.ts
================
// types/index.ts
export interface TokenInfo {
  mint: string
  symbol: string
  name: string
  raw_balance: string
  metadata_uri?: string
  decimals: number
  market_cap: number
  price_sol?: number
  price_usd?: number
}

export interface WalletDetailsMetadata {
  price_sol: any;
  price_usd: any;
  mint: string;
  symbol: string;
  name: string;
  raw_balance: string;
  uri?: string;
  decimals: number;
  market_cap: number;
  price?: number;
  logo?: string;
}

export interface WalletUpdate {
  balance: number;
  tokens: WalletDetailsMetadata[];
  address: string;
}

export interface CopyTradeSettings {
  id?: string;
  user_id?: string;
  tracked_wallet_id: string;
  is_enabled: boolean;
  trade_amount_sol: number;
  max_slippage: number;
  max_open_positions: number;
  allowed_tokens: string[];
  use_allowed_tokens_list: boolean;
  allow_additional_buys: boolean;
  match_sell_percentage: boolean;
  min_sol_balance: number;
}

export interface Notification {
  id: string;
  type: "success" | "error" | "info" | "warning";
  title: string;
  message: string;
  timestamp: Date;
}

export interface WalletLookupResult {
  address: string;
  solBalance: number;
  tokens: TokenInfo[];
}

export interface TrackedWallet {
  id?: string;
  user_id?: string;
  wallet_address: string;
  is_active: boolean;
  created_at?: string;
  updated_at?: string;
}

export interface WatchlistToken {
  address: string;
  symbol: string;
  name: string;
  balance?: string;
  market_cap?: number;
  decimals?: number;
}

export interface TokenListResponse {
  tokens: TokenInfo[]
  total: number
  page: number
  limit: number
}

================
File: src/types/market.ts
================
// src/types/market.ts
export interface OrderBookEntry {
    price: number
    size: number
    total: number
}

export interface OrderBookProps {
    bids: OrderBookEntry[]
    asks: OrderBookEntry[]
    isLoading: boolean
    depth?: number
}

export interface MarketData {
    price: number
    volume24h: number
    high24h: number
    low24h: number
    change24h: number
}

================
File: src/types/trading.ts
================
export interface TradeItem {
  id: string
  pair: string
  side: 'buy' | 'sell'
  amount: number
  price: number
  timestamp: Date
}

export interface Trade {
  id: string
  type: 'buy' | 'sell'
  token: string
  amount: number
  price: number
  timestamp: Date
  status: 'pending' | 'executed' | 'canceled'
}

================
File: src/types/ui.ts
================
import { CopyTradeSettings, WalletUpdate } from "@/types/index";
import { DexType } from "@/types/crypto";
export type ConnectionState = "connected" | "connecting" | "disconnected";

export interface TokenRowProps {
  token: TokenInfo;
  onClickTrade: (token: TokenInfo) => void;
}

export interface TradeFormState {
  amount: string;
  slippage: number;
}

export interface ServerWalletState extends WalletTrackerState {
  error?: string;
}

// Extend the store state
export interface WalletTrackerState {
  serverWallet: WalletUpdate | null;
  isLoading: boolean;
  error?: string;
  copyTradeSettings: CopyTradeSettings | null;
  isSettingsEnabled: boolean;
  connectionStatus: ConnectionState;
  notifications: Notification[];
}

export type TradeType = "buy" | "sell";

export interface TokenTradeProps {
  token: TokenInfo;
  onTrade: (type: TradeType, amount: number, dex: DexType) => Promise<void>;
  isLoading?: boolean;
}

export interface TokenInfo {
  address: string;
  symbol: string;
  name: string;
  balance: string;
  market_cap: number;
  decimals: number;
}

================
File: src/types/wallet.ts
================
export interface WalletUpdate {
    address: string
    totalEquity: number
    equity: number
    availableBalance: number
    tokens: {
        symbol: string
        balance: number
        value: number
    }[]
    positions: {
        symbol: string
        size: number
        entryPrice: number
        markPrice: number
        pnl: number
    }[]
}

================
File: src/types/websocket.ts
================
import { CopyTradeSettings } from ".";

export type CommandMessage = {
  type: "start" | "update_settings" | "refresh_state" | "manual_sell";
  settings?: CopyTradeSettings; // for update_settings
  token_address?: string; // for manual_sell
  amount?: number; // for manual_sell
  slippage?: number; // for manual_sell
};

export interface TradeMessage {
  type: 'BUY' | 'SELL' | 'UNDO_TRADE'
  id: string
  amount: number
  token: string
}

export interface PriceUpdateMessage {
  type: 'PRICE_UPDATE'
  data: {
    token: string
    price: number
  }
}

export type WebSocketMessage =
  | { type: 'CONFIRM_TRADE', id: string, amount: number, token: string }
  | { type: 'UNDO_TRADE', id: string }
  | { type: 'PRICE_UPDATE', data: { token: string, price: number } }
  | { type: 'WALLET_UPDATE', data: any }
  | { type: 'ERROR', message: string }

================
File: .env.example
================
NEXT_PUBLIC_API_URL=
NEXT_PUBLIC_WEBSOCKET_URL=

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files
.env.local
.env.development
.env.production
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: directory_structure
================
src/app/
└── trading/
    └── [address]/
        └── page.tsx

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  serverRuntimeConfig: {
    port: 3002,
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "trading-platform-client",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.0",
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.1.2",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.5",
    "@radix-ui/react-hover-card": "^1.1.5",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-radio-group": "^1.2.2",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.4",
    "@radix-ui/react-toggle": "^1.1.1",
    "@radix-ui/react-toggle-group": "^1.1.1",
    "@radix-ui/react-tooltip": "^1.1.7",
    "@solana/wallet-adapter-base": "^0.9.23",
    "@solana/web3.js": "^1.98.0",
    "@tremor/react": "^3.18.7",
    "apexcharts": "^4.4.0",
    "bs58": "^6.0.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lightweight-charts": "^5.0.1",
    "lodash.throttle": "^4.1.1",
    "lucide-react": "^0.469.0",
    "motion": "^12.0.11",
    "next": "^15.1.3",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "react-apexcharts": "^1.7.0",
    "react-collapsible": "^2.10.0",
    "react-dom": "^19.0.0",
    "react-draggable": "^4.4.6",
    "react-error-boundary": "^5.0.0",
    "react-hook-form": "^7.54.2",
    "react-toastify": "^11.0.3",
    "sonner": "^1.7.1",
    "swr": "^2.3.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "use-throttle": "^0.0.3",
    "zod": "^3.24.1",
    "zustand": "^5.0.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
# Solana DEX Trading Platform Frontend

A Next.js dashboard for managing and monitoring Solana DEX trading activities. Intended to be used with the [DEX Trading Platform Backend](https://github.com/BrandonFlorian/trading-platform).

NOTE: This is a work in progress and is not yet ready for production.

## Overview

This dashboard provides a real-time interface for:

- Monitoring wallet balances and token holdings
- Managing copy trade settings
- Executing trades on multiple DEXs (pump.fun, Raydium)
- Viewing trade history and notifications

## Tech Stack

- **Framework**: Next.js 15 with App Router
- **Styling**: Tailwind CSS
- **UI Components**: shadcn/ui
- **State Management**: Zustand
- **Real-time Updates**: WebSockets
- **Form Handling**: React Hook Form
- **Notifications**: Sonner

## Getting Started

1. Clone the repository
2. Install dependencies:

```bash
npm install
```

3. Set up environment variables:

```env
NEXT_PUBLIC_API_URL=http://localhost:3000
NEXT_PUBLIC_WS_URL=ws://localhost:3001
```

4. Run the development server:

```bash
npm run dev
```

## Features

### Server Wallet

- Real-time balance monitoring
- Token holdings display
- Trade execution interface for any token
- Support for multiple DEXs

### Copy Trade Settings

- Enable/disable copy trading
- Configure trade amounts and limits
- Set slippage tolerance
- Manage position limits
- Token allowlist support

### Notifications

- Real-time trade notifications
- Settings update confirmations
- Error notifications
- Connection status updates

## Project Structure

```
src/
├── components/
│   ├── dashboard/           # Dashboard-specific components
│   │   ├── server-wallet-card.tsx
│   │   ├── copy-trade-settings-panel.tsx
│   │   ├── notification-panel.tsx
│   │   └── ...
│   └── ui/                  # Reusable UI components (shadcn)
├── hooks/
│   └── useWebSocket.ts      # WebSocket connection management
├── stores/
│   └── walletTrackerStore.ts # Global state management
└── types/
    ├── index.ts             # Common types
    ├── ui.ts                # UI-specific types
    └── websocket.ts         # WebSocket types
```

## Component Usage

### Server Wallet Card

```tsx
import { ServerWalletCard } from "@/components/dashboard/server-wallet-card";

// Displays wallet balance and token holdings
```

### Copy Trade Settings

```tsx
import { CopyTradeSettingsPanel } from "@/components/dashboard/copy-trade-settings-panel";

// Manages copy trade configuration
```

### Trading Interface

```tsx
import { TradePanel } from "@/components/dashboard/trade-panel";

// Provides buy/sell interface for tokens
```

## State Management

The application uses Zustand for state management. Key stores include:

```typescript
// stores/walletTrackerStore.ts
interface WalletTrackerState {
  serverWallet: WalletUpdate | null;
  copyTradeSettings: CopyTradeSettings | null;
  // ... other state

  // Actions
  setCopyTradeSettings: (settings: CopyTradeSettings) => void;
  executeBuy: (address: string, amount: number) => Promise;
  executeSell: (address: string, amount: number) => Promise;
}
```

## WebSocket Integration

Real-time updates are handled through a WebSocket connection:

```typescript
// hooks/useWebSocket.ts
const useWebSocket = (url: string) => {
  // Manages WebSocket connection and message handling
  // Returns connection status and message sender
};
```

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

================
File: tailwind.config.ts
================
import tailwindcssAnimate from "tailwindcss-animate";

const config = {
  darkMode: ["class"],
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [tailwindcssAnimate],
};

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    },
    
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================================
End of Codebase
================================================================
